import ctypes
import boto3
from botocore.exceptions import ClientError
import json
import base64
import hvac
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad


class SecretRetriever:
    def __init__(self):
        pass

    @staticmethod
    def clear_password(password_bytes):
        password_buffer = ctypes.create_string_buffer(password_bytes)
        for i in range(len(password_buffer)):
            password_buffer[i] = 0

    @staticmethod
    def get_password_aws(secret_name, password_key, user_key, region_name):
        session = boto3.session.Session()
        client = session.client(service_name='secretsmanager', region_name=region_name)

        try:
            get_secret_value_response = client.get_secret_value(SecretId=secret_name)
        except ClientError as e:
            raise Exception("Couldn't retrieve the secret") from e
        else:
            if 'SecretString' in get_secret_value_response:
                secret = json.loads(get_secret_value_response['SecretString'])
            else:
                secret = json.loads(base64.b64decode(get_secret_value_response['SecretBinary']))

        pass_secret = secret[password_key]
        user = secret[user_key]
        return pass_secret.encode()

    @staticmethod
    def get_password_from_vault(vault_addr, vault_token, secret_path, secret_key, cert_priv, cert_key, cert_auth):
        client = hvac.Client(url=vault_addr, cert=(cert_priv, cert_key), verify=cert_auth, token=vault_token)

        if not client.is_authenticated():
            print("Error: Invalid Vault token.")
            return None

        read_response = client.secrets.kv.v2.read_secret_version(path=secret_path)

        if secret_key in read_response["data"]["data"]:
            secret = read_response["data"]["data"][secret_key]
            return secret.encode()
        else:
            print(f"Error: {secret_key} not found in the secret.")
            return None

    @staticmethod
    def get_password_from_encrypted_file(file_path, key):
        cipher = AES.new(key, AES.MODE_ECB)

        with open(file_path, 'rb') as f:
            ciphertext = f.read()

        plaintext = unpad(cipher.decrypt(ciphertext), AES.block_size)
        return plaintext.decode('utf-8').encode()
