import ctypes
import boto3
from botocore.exceptions import ClientError
import json
import base64
import hvac
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad


"""
    A secret retriever Python script which communicates with a secret manager server to 
    retrieve sensitive or encrypted information. It could be used for tasks such as 
    fetching API keys, passwords, or other confidential data stored on the server.
    
    License:
        MIT License

        Copyright (c) 2023, WildBerry, LLC

        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:

        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.

        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
"""

__author__      = "Marco A. Villarruel"
__authors__     = ["Marco A. Villarruel"]
__contacts__    = ["marco.urquieta@proton.me", "marco@wildberry.us"]
__copyright__   = "Copyright 2023, WildBerry, LLC"
__credits__     = ["Marco A. Villarruel"]
__date__        = "2023/06/15"
__deprecated__  = False
__emails__      = ["marco.urquieta@proton.me", "marco@wildberry.us"]
__license__     = "GPLv3"
__maintainer__  = "developer"
__status__      = "Production"
__version__     = "1.0.0"

class SecretRetriever:
    def __init__(self):
        pass

    @staticmethod
    def clear_password(password_bytes):
        password_buffer = ctypes.create_string_buffer(password_bytes)
        for i in range(len(password_buffer)):
            password_buffer[i] = 0

    @staticmethod
    def get_password_aws(secret_name, password_key, user_key, region_name):
        session = boto3.session.Session()
        client = session.client(service_name='secretsmanager', region_name=region_name)

        try:
            get_secret_value_response = client.get_secret_value(SecretId=secret_name)
        except ClientError as e:
            raise Exception("Couldn't retrieve the secret") from e
        else:
            if 'SecretString' in get_secret_value_response:
                secret = json.loads(get_secret_value_response['SecretString'])
            else:
                secret = json.loads(base64.b64decode(get_secret_value_response['SecretBinary']))

        pass_secret = secret[password_key]
        user = secret[user_key]
        return pass_secret.encode()

    @staticmethod
    def get_password_from_vault(vault_addr, vault_token, secret_path, secret_key, cert_priv, cert_key, cert_auth):
        client = hvac.Client(url=vault_addr, cert=(cert_priv, cert_key), verify=cert_auth, token=vault_token)

        if not client.is_authenticated():
            print("Error: Invalid Vault token.")
            return None

        read_response = client.secrets.kv.v2.read_secret_version(path=secret_path)

        if secret_key in read_response["data"]["data"]:
            secret = read_response["data"]["data"][secret_key]
            return secret.encode()
        else:
            print(f"Error: {secret_key} not found in the secret.")
            return None

    @staticmethod
    def get_password_from_encrypted_file(file_path, key):
        cipher = AES.new(key, AES.MODE_ECB)

        with open(file_path, 'rb') as f:
            ciphertext = f.read()

        plaintext = unpad(cipher.decrypt(ciphertext), AES.block_size)
        return plaintext.decode('utf-8').encode()
