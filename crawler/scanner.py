#!/usr/bin/env python
import argparse
import requests
import urllib.parse as urlparse
import re
from bs4 import BeautifulSoup

'''
        Run the script by providing the required arguments in the following format:
        
        python scanner.py --target_url "http://target.com" --ignore_links "http://target.com/ignore1" \
            "http://target.com/ignore2" --xss_test_script "<sCript>alert('test')</scriPt>".
        
        The script will attempt to scan the target URL for XSS vulnerabilities and print discovered vulnerabilities to the terminal.

'''


class Scanner:
    def __init__(self, url, ignore_links, xss_test_script):
        self.session = requests.Session()
        self.target_url = url
        self.target_links = []
        self.links_to_ignore = ignore_links
        self.xss_test_script = xss_test_script

    # Extract all href links from a URL
    def extract_links_from(self, url):
        response = self.session.get(url)
        return re.findall('(?:href=")(.*?)"', response.content.decode(errors='ignore'))

    # Crawl all URLs and recursively search for links
    def crawl(self, url=None):
        if url is None:
            url = self.target_url
        href_links = self.extract_links_from(url)
        for link in href_links:
            link = urlparse.urljoin(url, link)

            if '#' in link:
                link = link.split('#')[0]

            if self.target_url in link and link not in self.target_links and link not in self.links_to_ignore:
                self.target_links.append(link)
                self.crawl(link)

    # Extract all forms from a URL
    def extract_forms(self, url):
        response = self.session.get(url)
        parsed_html = BeautifulSoup(response.content, features='lxml')
        return parsed_html.findAll('form')

    # Submit a form with provided value and return the response
    def submit_form(self, form, value, url):
        action = form.get('action')
        post_url = urlparse.urljoin(url, action)
        method = form.get('method')

        input_list = form.findAll('input')
        post_data = {}
        for input_field in input_list:
            input_name = input_field.get('name')
            input_type = input_field.get('type')
            input_value = input_field.get('value')
            if input_type == 'text':
                input_value = value

            post_data[input_name] = input_value
        if method == 'post':
            return self.session.post(post_url, data=post_data)

        return self.session.get(post_url, params=post_data)

    # Run the scanner for links and forms
    def run_scanner(self):
        for link in self.target_links:
            forms = self.extract_forms(link)
            for form in forms:
                print('[+] Testing form in ' + link)
                is_vulnerable_to_xss = self.test_xss_in_form(form, link)
                if is_vulnerable_to_xss:
                    print('[***] XSS discovered in ' +
                          link + ' in the following form:')
                    print(form)

            if '=' in link:
                print('[+] Testing ' + link)
                is_vulnerable_to_xss = self.test_xss_in_link(link)
                if is_vulnerable_to_xss:
                    print('[***] Discovered XSS in ' + link)

    # Test for XSS vulnerability in a link
    def test_xss_in_link(self, url):
        url = url.replace('=', '=' + self.xss_test_script)
        response = self.session.get(url)
        return self.xss_test_script in response.content.decode('latin-1')

    # Test for XSS vulnerability in a form
    def test_xss_in_form(self, form, url):
        response = self.submit_form(form, self.xss_test_script, url)
        return self.xss_test_script in response.content.decode('latin-1')


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="XSS Scanner")
    parser.add_argument("-t", "--target-url", dest="target_url", type=str, required=True,
                        help="Target URL to be scanned")
    parser.add_argument("-i", "--ignore-links", dest="ignore_links", type=str, nargs="*",
                        help="Links to be ignored during scanning")
    parser.add_argument("-x", "--xss-test-script", dest="xss_test_script", type=str, required=True,
                        help="XSS test script string")

    args = parser.parse_args()

    scanner = Scanner(args.target_url, args.ignore_links, args.xss_test_script)
    scanner.run_scanner()
