#!/usr/bin/env python
import argparse
import requests
import urllib.parse as urlparse
import re
from bs4 import BeautifulSoup

"""
    Run the script by providing the required arguments in the following format:
    
    Usage:
      ./python scanner.py --target_url "http://target.com" --ignore_links "http://target.com/ignore1" \
            "http://target.com/ignore2" --xss_test_script "<sCript>alert('test')</scriPt>"
      
    The script will attempt to scan the target URL for XSS vulnerabilities and 
    print discovered vulnerabilities to the terminal.
    
    License:
        MIT License

        Copyright (c) 2023, WildBerry, LLC

        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:

        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.

        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
"""

__author__      = "Marco A. Villarruel"
__authors__     = ["Marco A. Villarruel"]
__contacts__    = ["marco.urquieta@proton.me", "marco@wildberry.us"]
__copyright__   = "Copyright 2023, WildBerry, LLC"
__credits__     = ["Marco A. Villarruel"]
__date__        = "2023/06/15"
__deprecated__  = False
__emails__      = ["marco.urquieta@proton.me", "marco@wildberry.us"]
__license__     = "GPLv3"
__maintainer__  = "developer"
__status__      = "Production"
__version__     = "1.0.0"

def logo():
    print("""
        ___    __    __   __  ____  ____  ___   __   _
       / __)  /__\  (  \_/  )(  _ \( ___)/ _ \ (  \_( )
      ( (__  /(__)\ )  ___  ( )___/ )__)( (_) )) (\ ) (
       \___)(__)(__)(__) (__)(__)  (____)\___/ (_) \__)
 _    _  _____  _     ____   _____  ____  _____  _____  _   _
( )  ( )(__ __)( )   (  _ \ ( (_) \( ___)( (_) )( (_) )( )_( )  
) (/\) ( _( )_ ) (__ ) (_) ))  _  ( )__) ) (\ ( ) (\ (  \   /
(_/  \_)(_____)(____)(____/ (_(_)_/(____)(_) \_)(_) \_)  (_)
        """)

class Scanner:
    def __init__(self, url, ignore_links, xss_test_script):
        self.session = requests.Session()
        self.target_url = url
        self.target_links = []
        self.links_to_ignore = ignore_links
        self.xss_test_script = xss_test_script

    # Extract all href links from a URL
    def extract_links_from(self, url):
        response = self.session.get(url)
        return re.findall('(?:href=")(.*?)"', response.content.decode(errors='ignore'))

    # Crawl all URLs and recursively search for links
    def crawl(self, url=None):
        if url is None:
            url = self.target_url
        href_links = self.extract_links_from(url)
        for link in href_links:
            link = urlparse.urljoin(url, link)

            if '#' in link:
                link = link.split('#')[0]

            if self.target_url in link and link not in self.target_links and link not in self.links_to_ignore:
                self.target_links.append(link)
                self.crawl(link)

    # Extract all forms from a URL
    def extract_forms(self, url):
        response = self.session.get(url)
        parsed_html = BeautifulSoup(response.content, features='lxml')
        return parsed_html.findAll('form')

    # Submit a form with provided value and return the response
    def submit_form(self, form, value, url):
        action = form.get('action')
        post_url = urlparse.urljoin(url, action)
        method = form.get('method')

        input_list = form.findAll('input')
        post_data = {}
        for input_field in input_list:
            input_name = input_field.get('name')
            input_type = input_field.get('type')
            input_value = input_field.get('value')
            if input_type == 'text':
                input_value = value

            post_data[input_name] = input_value
        if method == 'post':
            return self.session.post(post_url, data=post_data)

        return self.session.get(post_url, params=post_data)

    # Run the scanner for links and forms
    def run_scanner(self):
        for link in self.target_links:
            forms = self.extract_forms(link)
            for form in forms:
                print('[+] Testing form in ' + link)
                is_vulnerable_to_xss = self.test_xss_in_form(form, link)
                if is_vulnerable_to_xss:
                    print('[***] XSS discovered in ' +
                          link + ' in the following form:')
                    print(form)

            if '=' in link:
                print('[+] Testing ' + link)
                is_vulnerable_to_xss = self.test_xss_in_link(link)
                if is_vulnerable_to_xss:
                    print('[***] Discovered XSS in ' + link)

    # Test for XSS vulnerability in a link
    def test_xss_in_link(self, url):
        url = url.replace('=', '=' + self.xss_test_script)
        response = self.session.get(url)
        return self.xss_test_script in response.content.decode('latin-1')

    # Test for XSS vulnerability in a form
    def test_xss_in_form(self, form, url):
        response = self.submit_form(form, self.xss_test_script, url)
        return self.xss_test_script in response.content.decode('latin-1')


if __name__ == "__main__":
    logo()
    parser = argparse.ArgumentParser(description="XSS Scanner")
    parser.add_argument("-t", "--target-url", dest="target_url", type=str, required=True,
                        help="Target URL to be scanned")
    parser.add_argument("-i", "--ignore-links", dest="ignore_links", type=str, nargs="*",
                        help="Links to be ignored during scanning")
    parser.add_argument("-x", "--xss-test-script", dest="xss_test_script", type=str, required=True,
                        help="XSS test script string")

    args = parser.parse_args()

    scanner = Scanner(args.target_url, args.ignore_links, args.xss_test_script)
    scanner.run_scanner()
