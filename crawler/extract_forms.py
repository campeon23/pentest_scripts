#!/usr/bin/env python
import argparse
import requests
import urllib.parse as urlparse
from bs4 import BeautifulSoup

"""
    Run the script by providing the required arguments in the following format:
    
    Usage:
      ./python extract_forms.py --target_url http://192.168.100.32/mutillidae/index.php?page=dns-lookup.php
      
    An extract forms Python script used to parse HTML webpages and extract all form-related 
    information such as the form's action, method, and the input fields. It's typically used 
    for web scraping or automating interactions with web forms.
    
    License:
        MIT License

        Copyright (c) 2023, WildBerry, LLC

        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:

        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.

        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
"""

__author__      = "Marco A. Villarruel"
__authors__     = ["Marco A. Villarruel"]
__contacts__    = ["marco.urquieta@proton.me", "marco@wildberry.us"]
__copyright__   = "Copyright 2023, WildBerry, LLC"
__credits__     = ["Marco A. Villarruel"]
__date__        = "2023/06/15"
__deprecated__  = False
__emails__      = ["marco.urquieta@proton.me", "marco@wildberry.us"]
__license__     = "GPLv3"
__maintainer__  = "developer"
__status__      = "Production"
__version__     = "1.0.0"


def logo():
    print("""
        ___    __    __   __  ____  ____  ___   __   _
       / __)  /__\  (  \_/  )(  _ \( ___)/ _ \ (  \_( )
      ( (__  /(__)\ )  ___  ( )___/ )__)( (_) )) (\ ) (
       \___)(__)(__)(__) (__)(__)  (____)\___/ (_) \__)
 _    _  _____  _     ____   _____  ____  _____  _____  _   _
( )  ( )(__ __)( )   (  _ \ ( (_) \( ___)( (_) )( (_) )( )_( )  
) (/\) ( _( )_ ) (__ ) (_) ))  _  ( )__) ) (\ ( ) (\ (  \   /
(_/  \_)(_____)(____)(____/ (_(_)_/(____)(_) \_)(_) \_)  (_)
        """)

def send_request(url):
    """
    Function to send a GET request to the provided URL.
    """
    try:
        return requests.get(url)
    except requests.exceptions.ConnectionError:
        pass


def get_form_details(target_url):
    """
    Function to parse forms from the HTML content of the provided URL.
    It then constructs the post_data and sends a POST request for each form.
    """
    response = send_request(target_url)
    parsed_html = BeautifulSoup(response.content, features='lxml')

    # Finding all forms in the HTML content
    forms_list = parsed_html.findAll('form')

    for form in forms_list:
        action = form.get('action')
        # Constructing the absolute URL
        post_url = urlparse.urljoin(target_url, action)
        method = form.get('method')

        input_list = form.findAll('input')
        post_data = {}
        for inp in input_list:
            input_name = inp.get('name')
            input_type = inp.get('type')
            input_value = inp.get('value')
            if input_type == 'text':
                input_value = 'test'

            post_data[input_name] = input_value

        # Sending a POST request with the constructed data
        result = requests.post(post_url, data=post_data)
        print(BeautifulSoup(result.content, features='lxml'))


def main(target_url):
    logo()
    """
    The main function that runs the program.
    """
    get_form_details(target_url)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='HTML Form Details Getter')
    parser.add_argument("-t", "--target-url", dest="target_url", type=str,
                        required=True, help="The target URL")

    args = parser.parse_args()

    main(args.target_url)
