#!/usr/bin/env python
import argparse
import scanner
from bs4 import BeautifulSoup

"""
    Run the script by providing the required arguments in the following format:
    
    Usage:
      ./python vulnerability_scanner.py --target_url "http://target.com" --form_url "http://target.com/form" --login_url "http://target.com/login" \
            --username "admin" --password "password" --links_to_ignore "http://target.com/logout"
      
    The script will scan the target URL and print the results of the vulnerability scan to the terminal.
    
    License:
        MIT License

        Copyright (c) 2023, WildBerry, LLC

        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:

        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.

        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
"""

__author__      = "Marco A. Villarruel"
__authors__     = ["Marco A. Villarruel"]
__contacts__    = ["marco.urquieta@proton.me", "marco@wildberry.us"]
__copyright__   = "Copyright 2023, WildBerry, LLC"
__credits__     = ["Marco A. Villarruel"]
__date__        = "2023/06/15"
__deprecated__  = False
__emails__      = ["marco.urquieta@proton.me", "marco@wildberry.us"]
__license__     = "GPLv3"
__maintainer__  = "developer"
__status__      = "Production"
__version__     = "1.0.0"

def logo():
    print("""
        ___    __    __   __  ____  ____  ___   __   _
       / __)  /__\  (  \_/  )(  _ \( ___)/ _ \ (  \_( )
      ( (__  /(__)\ )  ___  ( )___/ )__)( (_) )) (\ ) (
       \___)(__)(__)(__) (__)(__)  (____)\___/ (_) \__)
 _    _  _____  _     ____   _____  ____  _____  _____  _   _
( )  ( )(__ __)( )   (  _ \ ( (_) \( ___)( (_) )( (_) )( )_( )  
) (/\) ( _( )_ ) (__ ) (_) ))  _  ( )__) ) (\ ( ) (\ (  \   /
(_/  \_)(_____)(____)(____/ (_(_)_/(____)(_) \_)(_) \_)  (_)
        """)

class VulnerabilityScanner:
    """Vulnerability Scanner to test for XSS in forms and links."""

    def __init__(self, target_url, form_url, links_to_ignore, login_url, username, password):
        self.target_url = target_url
        self.form_url = form_url
        self.login_url = login_url
        self.links_to_ignore = links_to_ignore
        self.data_dict = {'username': username,
                          'password': password,
                          'Login': 'submit'
                          }

        # Initialize scanner with the target URL and links to ignore
        self.vuln_scanner = scanner.Scanner(
            self.target_url, self.links_to_ignore)

        # Log in to the session
        self.vuln_scanner.session.post(self.login_url, data=self.data_dict)

    def run_scanner(self):
        """Extract forms and test for XSS vulnerabilities in forms and links."""

        forms = self.vuln_scanner.extract_forms(self.form_url)
        print(forms)

        response = self.vuln_scanner.test_xss_in_form(forms[0], self.form_url)
        print('test_xss_in_form: ', response)

        response = self.vuln_scanner.test_xss_in_link(
            self.form_url + '?name=test')
        print('test_xss_in_link: ', response)

        self.vuln_scanner.crawl()
        self.vuln_scanner.run_scanner()


if __name__ == "__main__":
    logo()
    parser = argparse.ArgumentParser(description="Vulnerability Scanner")

    parser.add_argument("-t", "--target-url", dest="target_url", type=str,
                        required=True, help="Target URL to scan")
    parser.add_argument("-f", "--form-url", dest="form_url", type=str, required=True,
                        help="URL of the form to scan")
    parser.add_argument("-l", "--login-url", dest="login_url", type=str,
                        required=True, help="Login URL")
    parser.add_argument("-u", "--username", dest="username", type=str,
                        required=True, help="Login username")
    parser.add_argument("-p", "--password", dest="password", type=str,
                        required=True, help="Login password")
    parser.add_argument("-i", "--links-to-ignore", dest="links_to_ignore", nargs="*", required=False, default=[],
                        help="List of links to ignore during the scan")

    args = parser.parse_args()

    scanner = VulnerabilityScanner(args.target_url, args.form_url, args.links_to_ignore,
                                   args.login_url, args.username, args.password)

    scanner.run_scanner()
