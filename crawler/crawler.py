#!/usr/bin/env python

import argparse
import requests

"""
    Run the script by providing the target_url and wordlist arguments in the following format:
    
    Usage:
      ./python crawler.py --target-url google.com --wordlist ./subdomains-wodlist.txt
    
    License:
        MIT License

        Copyright (c) 2023 Marco A. Villarruel

        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:

        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.

        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
"""


__author__      = "Marco A. Villarruel"
__authors__     = ["Marco A. Villarruel"]
__contact__     = "marco.urquieta@proton.me"
__copyright__   = "Copyright 2013, WildBerry"
__credits__     = ["Marco A. Villarruel"]
__date__        = "2023/06/15"
__deprecated__  = False
__email__       =  "marco.urquieta@proton.me"
__license__     = "GPLv3"
__maintainer__  = "developer"
__status__      = "Production"
__version__     = "1.0.0"


def logo():
    print("""
        ___    __    __   __  ____  ____  ___   __   _
       / __)  /__\  (  \_/  )(  _ \( ___)/ _ \ (  \_( )
      ( (__  /(__)\ )  ___  ( )___/ )__)( (_) )) (\ ) (
       \___)(__)(__)(__) (__)(__)  (____)\___/ (_) \__)
 _    _  _____  _     ____   _____  ____  _____  _____  _   _
( )  ( )(__ __)( )   (  _ \ ( (_) \( ___)( (_) )( (_) )( )_( )  
) (/\) ( _( )_ ) (__ ) (_) ))  _  ( )__) ) (\ ( ) (\ (  \   /
(_/  \_)(_____)(____)(____/ (_(_)_/(____)(_) \_)(_) \_)  (_)
        """)
    
def request(url):
    """
    Function to make a get request to the provided URL.
    """
    try:
        return requests.get('http://' + url)
    except requests.exceptions.ConnectionError as err:
        pass  # if there is a connection error, just skip this URL


def get_subdomains(target_url, wordlist):
    """
    Function to iterate over the wordlist and test each as a potential subdomain.
    If a valid response is received, it's printed as a discovered subdomain.
    """
    with open(wordlist, 'r') as wordlist_file:
        for line in wordlist_file:
            test_url = line.strip('\r\n') + '.' + target_url
            response = request(test_url)
            if response:
                print('[+] Discovered subdomain --> ' + test_url)


def main(target_url, wordlist):
    logo()
    """
    The main function that runs the program.
    """
    get_subdomains(target_url, wordlist)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Subdomain Finder')
    parser.add_argument("-t", "--target-url", dest="target_url", type=str,
                        required=True, help="The target URL")
    parser.add_argument("-w", "--wordlist", dest="wordlist", type=str,
                        required=True, help="The wordlist file")

    args = parser.parse_args()

    main(args.target_url, args.wordlist)
