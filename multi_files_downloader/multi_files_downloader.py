#!/usr/bin/env python

import requests
import os
import argparse
import signal  # Import the signal module
from urllib.parse import urlsplit
from tqdm import tqdm  # Import tqdm for the progress bar
# Import ThreadPoolExecutor and as_completed
from concurrent.futures import ThreadPoolExecutor, as_completed


"""
    Run the script by providing the required arguments in the following format:
    
    Usage (example):
      python multi_files_downloader.py -u "https://www.example.com/file1.jpg" "https://www.example.com/file2.jpg"
        
    or
      python multi_files_downloader.py --urls "https://www.example.com/file1.jpg" "https://www.example.com/file2.jpg"
      
    A multi-file downloader Python script which automates the process of downloading multiple 
    files from the internet, potentially from different sources, improving efficiency 
    and saving time.
    
    License:
        MIT License

        Copyright (c) 2023, WildBerry, LLC

        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:

        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.

        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
"""

__author__ = "Marco A. Villarruel"
__authors__ = ["Marco A. Villarruel"]
__contacts__ = ["marco.urquieta@proton.me", "marco@wildberry.us"]
__copyright__ = "Copyright 2023, WildBerry, LLC"
__credits__ = ["Marco A. Villarruel"]
__date__ = "2023/06/15"
__deprecated__ = False
__emails__ = ["marco.urquieta@proton.me", "marco@wildberry.us"]
__license__ = "GPLv3"
__maintainer__ = "developer"
__status__ = "Production"
__version__ = "1.0.0"


def logo():
    print("""
        ___    __    __   __  ____  ____  ___   __   _
       / __)  /__\  (  \_/  )(  _ \( ___)/ _ \ (  \_( )
      ( (__  /(__)\ )  ___  ( )___/ )__)( (_) )) (\ ) (
       \___)(__)(__)(__) (__)(__)  (____)\___/ (_) \__)
 _    _  _____  _     ____   _____  ____  _____  _____  _   _
( )  ( )(__ __)( )   (  _ \ ( (_) \( ___)( (_) )( (_) )( )_( )  
) (/\) ( _( )_ ) (__ ) (_) ))  _  ( )__) ) (\ ( ) (\ (  \   /
(_/  \_)(_____)(____)(____/ (_(_)_/(____)(_) \_)(_) \_)  (_)
        """)


def download(url):
    """
    Downloads the content from the provided URL and saves it locally as a file.

    Parameters:
    url (str): The URL of the file to download.
    """

    # Add stream=True to enable streaming
    response = requests.get(url, stream=True)

    # split the url to get the filename, we are taking last part of the url as filename
    filename = os.path.basename(urlsplit(url).path)

    # Get the total file size from the Content-Length header
    total_size = int(response.headers.get('content-length', 0))

    # write the content into the file
    with open(filename, 'wb') as out_file:
        with tqdm(total=total_size, unit='B', unit_scale=True, desc=filename, ncols=100) as pbar:
            try:
                for data in response.iter_content(chunk_size=1024):
                    out_file.write(data)
                    pbar.update(len(data))
            except Exception as e:
                print(f"[-] Error downloading file from {url}: {str(e)}")
                os.remove(filename)  # Remove the partially downloaded file


def handle_interrupt(signal, frame):
    # Signal handler to handle KeyboardInterruption (Ctrl + C, Ctrl + Z)
    files = [f for f in os.listdir() if os.path.isfile(f)]
    for file in files:
        print(
            f"\n[-] Download process interrupted. Removing partially downloaded {file} file...")
        os.remove(file)
    print("[-] Partially downloaded files have been removed.")
    exit(0)


def main(urls):
    # Register the signal handler for KeyboardInterrupt
    signal.signal(signal.SIGINT, handle_interrupt)

    logo()
    """
    Main function to download files from provided list of urls.

    Parameters:
    urls (list of str): The URLs of files to download.
    """

    # Use ThreadPoolExecutor to download files concurrently
    with ThreadPoolExecutor() as executor:
        future_to_url = {executor.submit(download, url): url for url in urls}

        for future in tqdm(as_completed(future_to_url), total=len(urls), desc="Downloading Files", ncols=100):
            url = future_to_url[future]
            try:
                future.result()  # This will raise an exception if any error occurs during download
            except Exception as e:
                print(f"[-] Error downloading file from {url}: {str(e)}")


if __name__ == "__main__":
    # Create argument parser to handle command line arguments
    parser = argparse.ArgumentParser(
        description="[+] Download files from provided URLs.")
    parser.add_argument("-u", "--urls", nargs="+",
                        help="List of URLs separated by space.", required=True)

    args = parser.parse_args()

    main(args.urls)
