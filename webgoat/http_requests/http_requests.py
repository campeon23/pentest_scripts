# Required Libraries
import json
import requests

class HTTPRequests:
    """
    This class is used for making HTTP requests to a target URL with specified cookies and headers.
    """
    def __init__(self, attack_url, webgoat_cookie):
        """
        Initialize the HTTPRequests object with attack_url, session cookies and headers.

        :param attack_url: URL to be attacked.
        :param webgoat_cookie: session cookies to be used in the attack.
        """
        self.attack_url = attack_url
        self.login_session = webgoat_cookie

        # Headers for the HTTP requests
        self.headers = {
            "user-agent":"Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/109.0", 
            "Charset":"UTF-8",
            "Accept":"*/*",
            "Accept-Language": "en-US,en;q=0.5",
            "Connection":"keep-alive",
            "Upgrade-Insecure-Requests":"1"
        }
        
    def post_payload_lesson_challenge(self, lesson, payload, content_type=None):
        """
        Submit a challenge payload to a lesson.

        :param lesson: the lesson to be attacked.
        :param payload: the challenge payload.
        :param content_type: the content type of the payload. Default is "application/x-www-form-urlencoded".
        """
        # Create a cookies dictionary
        cookies = dict(JSESSIONID=self.login_session)

        # Copy headers and set the content type
        headers = self.headers.copy()
        headers["Content-Type"] = content_type if content_type else "application/x-www-form-urlencoded"
        
        print(f"[*] Attempting to submit {payload} lesson challenge payload.")
        
        profile_url = self.attack_url + f"{lesson}"
        print("Profile url: ", profile_url)

        response = requests.post(profile_url, headers=headers, cookies=cookies, data=payload)
        
        try:
            # Check if "error" not in response text
            if "error" not in response.text:
                user_response = json.loads(response.text.lower())
                user_response_formatted = json.dumps(user_response, indent=2)
                
                print("=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=")
                print(f"[+] SUCCESSFULY passed {payload} lesson challenge payload.")
                print("=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=")
                print(user_response_formatted)
                print("=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=")
                
                return True
            else:
                print(response.text)
        except Exception as e:
            print(f"Error occurred: {str(e)}. Validate passed cookie.")
            return False
