import time
import hashlib
import argparse

'''
        This script can be run from the terminal as follows:

        python md5_cracker.py -m '8C6976E5B5410415BDE908BD4DEE15DFB167A9C873FC4BB8A81F6F2AB448A918' -p './path_to_password_file'
        
        You need to replace '8C6976E5B5410415BDE908BD4DEE15DFB167A9C873FC4BB8A81F6F2AB448A918' hash
        with your actual hash and './path_to_password_file' with the path to your actual password file. 
        If the -p argument is not provided, the script will use './10k-most-common.txt' as the default password file.
'''


def crack_hash(hash, passwords_file):
    """
    Function to crack an md5 hash using a dictionary attack.
    """

    # Start runtime clock
    start = time.time()

    # Set md5 encrypted password we are looking for
    hash = hash
    guess = " "
    sol = "No solution found"
    count = 0

    # Open dictionary file
    with open(passwords_file, 'r') as filename:

        # For each entry, generate md5 encryption and check against desired solution
        for line in filename:
            m = hashlib.sha256()
            # Cut off '\n' character
            m.update(line[:-1].encode())
            guess = m.hexdigest()
            count += 1
            print(count, line[:-1], '\t' + guess)
            if guess == hash.lower():
                sol = line
                break

    # Stop time
    end = time.time()
    # Calculate rough estimate of run-time
    t_time = end - start
    print("Total runtime was -- ", t_time,
          " seconds and the answer was: ", sol)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description='Crack a SHA256 hash using a dictionary attack.')
    parser.add_argument('-m', '--md5', dest='hash',
                        required=True, help='The SHA256 hash to crack')
    parser.add_argument('-p', '--passwords', dest='passwords_file',
                        default="./10k-most-common.txt", help='Path to the password file')
    args = parser.parse_args()

    crack_hash(args.hash, args.passwords_file)
