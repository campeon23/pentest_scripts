#!/usr/bin/env python

import argparse
import scapy.all as scapy

"""
    Run the script by providing the required arguments in the following format:
    
    Usage (example):
        $ sudo python network_scanner.py --ip 192.168.1.1 --cidr 24

    Or, if using a subnet mask:

        $ sudo python network_scanner.py --ip 192.168.1.1 --mask 255.255.255.0
      
    A network scanner Python script tool used to identify active devices on a network 
    (such as computers and servers) along with their IP addresses, thereby mapping 
    the network's structure.
    
    NOTE: The Python script you are about to execute requires elevated privileges. 
    This is to ensure that all tasks embedded within the script are executed seamlessly, 
    especially those that require higher-level permissions such as system-level 
    changes or accessing protected resources.
    
    Ensure that you trust the source of the script and fully understand its functionality 
    before proceeding. Improper use or execution of scripts with elevated privileges can 
    lead to unintended changes to your system configuration, potential data loss, or 
    other adverse effects.
    
    License:
        MIT License

        Copyright (c) 2023, WildBerry, LLC

        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:

        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.

        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
"""

__author__ = "Marco A. Villarruel"
__authors__ = ["Marco A. Villarruel"]
__contacts__ = ["marco.urquieta@proton.me", "marco@wildberry.us"]
__copyright__ = "Copyright 2023, WildBerry, LLC"
__credits__ = ["Marco A. Villarruel"]
__date__ = "2023/06/15"
__deprecated__ = False
__emails__ = ["marco.urquieta@proton.me", "marco@wildberry.us"]
__license__ = "GPLv3"
__maintainer__ = "developer"
__status__ = "Production"
__version__ = "1.0.0"


def logo():
    print("""
        ___    __    __   __  ____  ____  ___   __   _
       / __)  /__\  (  \_/  )(  _ \( ___)/ _ \ (  \_( )
      ( (__  /(__)\ )  ___  ( )___/ )__)( (_) )) (\ ) (
       \___)(__)(__)(__) (__)(__)  (____)\___/ (_) \__)
 _    _  _____  _     ____   _____  ____  _____  _____  _   _
( )  ( )(__ __)( )   (  _ \ ( (_) \( ___)( (_) )( (_) )( )_( )  
) (/\) ( _( )_ ) (__ ) (_) ))  _  ( )__) ) (\ ( ) (\ (  \   /
(_/  \_)(_____)(____)(____/ (_(_)_/(____)(_) \_)(_) \_)  (_)
        """)


def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("-i", "--ip", dest="ip",
                        help="Gateway IP address to scan.", required=True)
    parser.add_argument("-m", "--mask", dest="mask",
                        help="Network address to scan, e.g. 255.255.255.0")
    parser.add_argument("-c", "--cidr", dest="cidr",
                        help="CIDR number to scan, e.g. 24")
    values = parser.parse_args()

    # Verify the user has given a subnet mask or CIDR
    if not values.mask and not values.cidr:
        parser.error(
            "[-] Please specify a subnet mask or CIDR, use --help for more info.")
    else:
        if not values.cidr:
            # If a subnet mask is passed, convert to CIDR
            values.cidr = netmask_to_cidr(values.mask)

    return values


def netmask_to_cidr(netmask):
    '''
    Convert subnet mask to CIDR notation.
    :param netmask: netmask IP addr (eg: 255.255.255.0)
    :return: equivalent CIDR number to given netmask IP (eg: 24)
    '''
    return sum([bin(int(x)).count('1') for x in netmask.split('.')])


def scan(ip):
    '''
    Perform network scan on the provided IP address.
    :param ip: IP address
    :return: list of clients
    '''
    arp_request = scapy.ARP(pdst=ip)
    broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
    arp_request_broadcast = broadcast/arp_request
    answered, _ = scapy.srp(arp_request_broadcast, timeout=1, verbose=False)

    clients_list = []
    for index, element in enumerate(answered):
        client_dict = {"ip": element[1].psrc, "mac": element[1].hwsrc}
        clients_list.append(client_dict)

    return clients_list


def print_results(results_list):
    '''
    Prints the IP and MAC addresses of the detected clients.
    :param results_list: list of client data
    :return: None
    '''
    print("IP\t\t\tMAC Address\n")
    for index, client in enumerate(results_list):
        print("ip: " + client["ip"] + ", \tmac: " + client["mac"])


if __name__ == "__main__":
    logo()
    options = get_args()
    scan_list = scan(options.ip + '/' + str(options.cidr))
    print_results(scan_list)
