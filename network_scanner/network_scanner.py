#!/usr/bin/env python

import argparse
import scapy.all as scapy

'''
        To run the script, use:

        python script.py --ip 192.168.1.1 --cidr 24

        Or, if using a subnet mask:

        python script.py --ip 192.168.1.1 --mask 255.255.255.0
'''


def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("-i", "--ip", dest="ip",
                        help="Gateway IP address to scan.", required=True)
    parser.add_argument("-m", "--mask", dest="mask",
                        help="Network address to scan, e.g. 255.255.255.0")
    parser.add_argument("-c", "--cidr", dest="cidr",
                        help="CIDR number to scan, e.g. 24")
    values = parser.parse_args()

    # Verify the user has given a subnet mask or CIDR
    if not values.mask and not values.cidr:
        parser.error(
            "[-] Please specify a subnet mask or CIDR, use --help for more info.")
    else:
        if not values.cidr:
            # If a subnet mask is passed, convert to CIDR
            values.cidr = netmask_to_cidr(values.mask)

    return values


def netmask_to_cidr(netmask):
    '''
    Convert subnet mask to CIDR notation.
    :param netmask: netmask IP addr (eg: 255.255.255.0)
    :return: equivalent CIDR number to given netmask IP (eg: 24)
    '''
    return sum([bin(int(x)).count('1') for x in netmask.split('.')])


def scan(ip):
    '''
    Perform network scan on the provided IP address.
    :param ip: IP address
    :return: list of clients
    '''
    arp_request = scapy.ARP(pdst=ip)
    broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
    arp_request_broadcast = broadcast/arp_request
    answered, _ = scapy.srp(arp_request_broadcast, timeout=1, verbose=False)

    clients_list = []
    for index, element in enumerate(answered):
        client_dict = {"ip": element[1].psrc, "mac": element[1].hwsrc}
        clients_list.append(client_dict)

    return clients_list


def print_results(results_list):
    '''
    Prints the IP and MAC addresses of the detected clients.
    :param results_list: list of client data
    :return: None
    '''
    print("IP\t\t\tMAC Address\n")
    for index, client in enumerate(results_list):
        print("ip: " + client["ip"] + ", mac: " + client["mac"])


if __name__ == "__main__":
    options = get_args()
    scan_list = scan(options.ip + '/' + str(options.cidr))
    print_results(scan_list)
