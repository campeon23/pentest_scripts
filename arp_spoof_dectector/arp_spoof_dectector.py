#!/usr/bin/env python

import argparse
import scapy.all as scapy

'''
    To run the script follow the example below:
    
    python arp_spoof_detector.py --interface eth0
'''


def get_args():
    """
    Parse and return command line arguments.
    """
    parser = argparse.ArgumentParser()
    parser.add_argument("-i", "--interface", dest="interface",
                        help="Interface to sniff", required=True)
    args = parser.parse_args()
    return args


def get_mac(ip):
    """
    Retrieve MAC address for a specified IP.
    """
    arp_request = scapy.ARP(pdst=ip)
    broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
    arp_request_broadcast = broadcast / arp_request
    (answered, unanswered) = scapy.srp(
        arp_request_broadcast, timeout=1, verbose=False)
    return answered[0][1].hwsrc if answered else None


def sniff(interface):
    """
    Sniff traffic on a given network interface.
    """
    scapy.sniff(iface=interface, store=False, prn=process_sniffed_packet)


def process_sniffed_packet(packet):
    """
    Analyze sniffed packets for potential ARP spoofing.
    """
    if packet.haslayer(scapy.ARP) and packet[scapy.ARP].op == 2:
        try:
            real_mac = get_mac(packet[scapy.ARP].psrc)
            response_mac = packet[scapy.ARP].hwsrc
            if real_mac != response_mac:
                print('[+] We are under attack!!!')
        except IndexError:
            pass


def main():
    """
    Main function to run the script logic.
    """
    options = get_args()
    sniff(options.interface)


if __name__ == "__main__":
    main()
