#!/usr/bin/env python
import operator
import argparse

class CaesarCipherAttack:
    """A class to represent Caesar Cipher attack."""

    # English character frequency
    freq_eng = {
        'a': 0.0817, 'b': 0.0150, 'c': 0.0278, 'd': 0.0425, 'e': 0.1270,
        'f': 0.0223, 'g': 0.0202, 'h': 0.0609, 'i': 0.0697, 'j': 0.0015,
        'k': 0.0077, 'l': 0.0403, 'm': 0.0241, 'n': 0.0675, 'o': 0.0751,
        'p': 0.0193, 'q': 0.0010, 'r': 0.0599, 's': 0.0633, 't': 0.0906,
        'u': 0.0276, 'v': 0.0098, 'w': 0.0236, 'x': 0.0015, 'y': 0.0197,
        'z': 0.0007
    }

    def __init__(self, cipher):
        self.cipher = cipher
        self.alphabet = 'abcdefghijklmnopqrstuvwxyz'
        self.frequency = dict.fromkeys(self.alphabet, 0)
        self.key = {}
        self.mappings = {}

    def calculate_freq(self):
        """Calculates the frequency of each character in the cipher."""

        letter_count = sum([self.cipher.count(c) for c in self.alphabet])
        for char in self.alphabet:
            self.frequency[char] = round(self.cipher.count(char) / letter_count, 4)

    def calculate_matches(self):
        """Calculates the matching score for each character based on the English character frequency."""

        for cipher_char in self.alphabet:
            mapping = {}
            for plain_char in self.alphabet:
                mapping[plain_char] = round(abs(self.frequency[cipher_char] - self.freq_eng[plain_char]), 4)
            self.mappings[cipher_char] = sorted(mapping.items(), key=operator.itemgetter(1))

    def set_key_mapping(self, cipher_char, plain_char):
        """Sets a key mapping manually."""

        if cipher_char in self.key:
            print(f"WARNING: Overwriting existing mapping for {cipher_char}")
        self.key[cipher_char] = plain_char

    def guess_key(self):
        """Guesses the key for decryption based on the mapping scores."""

        for cipher_char in self.alphabet:
            if cipher_char not in self.key:
                for plain_char, _ in self.mappings[cipher_char]:
                    if plain_char not in self.key.values():
                        self.key[cipher_char] = plain_char
                        break

    def decrypt(self):
        """Decrypts the cipher using the guessed key."""

        return ''.join([self.key.get(char, char) for char in self.cipher])


def parse_arguments():
    """Parses command line arguments."""

    parser = argparse.ArgumentParser(description="Decrypt a Caesar cipher.")
    parser.add_argument("-c", "--cipher", required=True, help="The cipher text to be decrypted.")
    return parser.parse_args()


def main():
    """Main function to execute the Caesar Cipher Attack."""

    args = parse_arguments()
    attack = CaesarCipherAttack(args.cipher)
    attack.calculate_freq()
    attack.calculate_matches()
    attack.set_key_mapping('a', 'x')
    attack.set_key_mapping('c', 'w')
    attack.set_key_mapping('d', 'd')
    attack.set_key_mapping('e', 'v')
    attack.set_key_mapping('f', 'q')
    attack.set_key_mapping('g', 'z')
    attack.set_key_mapping('m', 'a')
    attack.set_key_mapping('o', 'g')
    attack.set_key_mapping('p', 'h')
    attack.set_key_mapping('q', 'k')
    attack.set_key_mapping('r', 'e')
    attack.set_key_mapping('s', 'p')
    attack.set_key_mapping('t', 'y')
    attack.set_key_mapping('u', 'r')
    attack.set_key_mapping('v', 'c')
    attack.set_key_mapping('w', 'i')
    attack.set_key_mapping('x', 'f')
    attack.guess_key()
    decrypted_message = attack.decrypt()
    print("Decrypted message:\n", decrypted_message)


if __name__ == "__main__":
    main()
