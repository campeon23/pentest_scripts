#!/usr/bin/env python

import subprocess
import argparse
import re


'''
        To run the script, run it from the terminal and provide the URLs as arguments separated by space. Here is an example:

        python mac_changer.py -i "eth0" -m "00:11:22:33:44:55"
        
        or

        python mac_changer.py --interface "eth0" --mac "00:11:22:33:44:55"
'''


def get_args():
    """
    Parse and return command line arguments.
    """
    # Initialize argument parser
    parser = argparse.ArgumentParser()

    # Add command line arguments
    parser.add_argument("-i", "--interface", dest="interface",
                        help="Interface to change its MAC address", required=True)
    parser.add_argument("-m", "--mac", dest="new_mac",
                        help="New MAC address", required=True)

    # Parse arguments
    args = parser.parse_args()
    return args


def change_mac(interface, new_mac):
    """
    Change the MAC address for a specified interface.
    """
    print(f"[+] Changing MAC address for {interface} to {new_mac}")

    # Execute commands to change MAC address
    subprocess.call(["ifconfig", interface, "down"],
                    stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.call(["ifconfig", interface, "hw", "ether", new_mac],
                    stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.call(["ifconfig", interface, "up"],
                    stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    # Verify network status
    subprocess.call(["systemctl", "status", "networking.service"],
                    stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.call(["ifup", interface],
                    stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.call(["ifconfig"], stdout=subprocess.DEVNULL,
                    stderr=subprocess.DEVNULL)


def get_current_mac(interface):
    """
    Retrieve the current MAC address for a specified interface.
    """
    # Retrieve network interface configuration and extract MAC address
    ifconfig_result = subprocess.check_output(
        ["ifconfig", interface]).decode('utf-8')
    mac_result = re.search(r"\w\w:\w\w:\w\w:\w\w:\w\w:\w\w", ifconfig_result)

    # Handle case where MAC address cannot be read
    if not mac_result:
        print(f"[-] Could not read mac address. MAC Address: {mac_result}")
        exit(-1)
    else:
        return mac_result.group(0)


def main():
    # Parse command line arguments
    options = get_args()

    # Change MAC address
    change_mac(options.interface, options.new_mac)

    # Verify MAC address change
    current_mac = get_current_mac(options.interface)
    if current_mac == options.new_mac:
        print(f"[+] MAC Address successfully changed to {options.new_mac}")


# Run script
if __name__ == '__main__':
    main()
