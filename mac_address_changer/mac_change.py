#!/usr/bin/env python

import subprocess
import argparse
import re

"""
    Run the script by providing the required arguments in the following format:
    
    Usage (example):
        $ sudo python mac_change.py -i "eth0" -m "00:11:22:33:44:55"
        
    or

        $ sudo python mac_change.py --interface "eth0" --mac "00:11:22:33:44:55"
      
    NOTE: The Python script you are about to execute requires elevated privileges. 
    This is to ensure that all tasks embedded within the script are executed seamlessly, 
    especially those that require higher-level permissions such as system-level 
    changes or accessing protected resources.
    
    Ensure that you trust the source of the script and fully understand its functionality 
    before proceeding. Improper use or execution of scripts with elevated privileges can 
    lead to unintended changes to your system configuration, potential data loss, or 
    other adverse effects.


    
    License:
        MIT License

        Copyright (c) 2023, WildBerry, LLC

        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:

        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.

        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
"""

__author__ = "Marco A. Villarruel"
__authors__ = ["Marco A. Villarruel"]
__contacts__ = ["marco.urquieta@proton.me", "marco@wildberry.us"]
__copyright__ = "Copyright 2023, WildBerry, LLC"
__credits__ = ["Marco A. Villarruel"]
__date__ = "2023/06/15"
__deprecated__ = False
__emails__ = ["marco.urquieta@proton.me", "marco@wildberry.us"]
__license__ = "GPLv3"
__maintainer__ = "developer"
__status__ = "Production"
__version__ = "1.0.0"


def logo():
    print("""
        ___    __    __   __  ____  ____  ___   __   _
       / __)  /__\  (  \_/  )(  _ \( ___)/ _ \ (  \_( )
      ( (__  /(__)\ )  ___  ( )___/ )__)( (_) )) (\ ) (
       \___)(__)(__)(__) (__)(__)  (____)\___/ (_) \__)
 _    _  _____  _     ____   _____  ____  _____  _____  _   _
( )  ( )(__ __)( )   (  _ \ ( (_) \( ___)( (_) )( (_) )( )_( )  
) (/\) ( _( )_ ) (__ ) (_) ))  _  ( )__) ) (\ ( ) (\ (  \   /
(_/  \_)(_____)(____)(____/ (_(_)_/(____)(_) \_)(_) \_)  (_)
        """)


def get_args():
    """
    Parse and return command line arguments.
    """
    # Initialize argument parser
    parser = argparse.ArgumentParser()

    # Add command line arguments
    parser.add_argument("-i", "--interface", dest="interface",
                        help="Interface to change its MAC address", required=True)
    parser.add_argument("-m", "--mac", dest="new_mac",
                        help="New MAC address", required=True)

    # Parse arguments
    args = parser.parse_args()
    return args


def change_mac(interface, new_mac):
    """
    Change the MAC address for a specified interface.
    """
    print(f"[+] Changing MAC address for {interface} to {new_mac}")

    # Execute commands to change MAC address
    subprocess.call(["ifconfig", interface, "down"],
                    stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.call(["ifconfig", interface, "hw", "ether", new_mac],
                    stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.call(["ifconfig", interface, "up"],
                    stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    # Verify network status
    subprocess.call(["systemctl", "status", "networking.service"],
                    stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    # subprocess.call(["ifup", interface],
    subprocess.call(["ifconfig", interface, "up"],
                    stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.call(["ifconfig"],
                    stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)


def get_current_mac(interface):
    """
    Retrieve the current MAC address for a specified interface.
    """
    # Retrieve network interface configuration and extract MAC address
    ifconfig_result = subprocess.check_output(
        ["ifconfig", interface]).decode('utf-8')
    mac_result = re.search(r"\w\w:\w\w:\w\w:\w\w:\w\w:\w\w", ifconfig_result)

    # Handle case where MAC address cannot be read
    if not mac_result:
        print(f"[-] Could not read mac address. MAC Address: {mac_result}")
        exit(-1)
    else:
        return mac_result.group(0)


def main():
    logo()
    # Parse command line arguments
    options = get_args()

    # Change MAC address
    change_mac(options.interface, options.new_mac)

    # Verify MAC address change
    current_mac = get_current_mac(options.interface)
    if current_mac == options.new_mac:
        print(f"[+] MAC Address successfully changed to {options.new_mac}")


# Run script
if __name__ == '__main__':
    main()
